// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: report.proto

package report

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ReportService service

func NewReportServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ReportService service

type ReportService interface {
	FindReports(ctx context.Context, in *FindReportsRequest, opts ...client.CallOption) (*FindReportsResponse, error)
	FindReport(ctx context.Context, in *FindReportRequest, opts ...client.CallOption) (*FindReportResponse, error)
	FindReportData(ctx context.Context, in *FindReportDataRequest, opts ...client.CallOption) (*FindReportDataResponse, error)
	GenerateReportData(ctx context.Context, in *GenerateReportDataRequest, opts ...client.CallOption) (*GenerateReportDataResponse, error)
	FindCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error)
	AddReport(ctx context.Context, in *AddReportRequest, opts ...client.CallOption) (*AddReportResponse, error)
	ModifyReport(ctx context.Context, in *ModifyReportRequest, opts ...client.CallOption) (*ModifyReportResponse, error)
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectReports(ctx context.Context, in *DeleteSelectReportsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteReports(ctx context.Context, in *HardDeleteReportsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	RecoverSelectReports(ctx context.Context, in *RecoverSelectReportsRequest, opts ...client.CallOption) (*RecoverSelectReportsResponse, error)
	// 下载报表数据
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (ReportService_DownloadService, error)
}

type reportService struct {
	c    client.Client
	name string
}

func NewReportService(name string, c client.Client) ReportService {
	return &reportService{
		c:    c,
		name: name,
	}
}

func (c *reportService) FindReports(ctx context.Context, in *FindReportsRequest, opts ...client.CallOption) (*FindReportsResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.FindReports", in)
	out := new(FindReportsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindReport(ctx context.Context, in *FindReportRequest, opts ...client.CallOption) (*FindReportResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.FindReport", in)
	out := new(FindReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindReportData(ctx context.Context, in *FindReportDataRequest, opts ...client.CallOption) (*FindReportDataResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.FindReportData", in)
	out := new(FindReportDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) GenerateReportData(ctx context.Context, in *GenerateReportDataRequest, opts ...client.CallOption) (*GenerateReportDataResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.GenerateReportData", in)
	out := new(GenerateReportDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) FindCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.FindCount", in)
	out := new(CountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) AddReport(ctx context.Context, in *AddReportRequest, opts ...client.CallOption) (*AddReportResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.AddReport", in)
	out := new(AddReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) ModifyReport(ctx context.Context, in *ModifyReportRequest, opts ...client.CallOption) (*ModifyReportResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.ModifyReport", in)
	out := new(ModifyReportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.DeleteReport", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) DeleteSelectReports(ctx context.Context, in *DeleteSelectReportsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.DeleteSelectReports", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) HardDeleteReports(ctx context.Context, in *HardDeleteReportsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.HardDeleteReports", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) RecoverSelectReports(ctx context.Context, in *RecoverSelectReportsRequest, opts ...client.CallOption) (*RecoverSelectReportsResponse, error) {
	req := c.c.NewRequest(c.name, "ReportService.RecoverSelectReports", in)
	out := new(RecoverSelectReportsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (ReportService_DownloadService, error) {
	req := c.c.NewRequest(c.name, "ReportService.Download", &DownloadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &reportServiceDownload{stream}, nil
}

type ReportService_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResponse, error)
}

type reportServiceDownload struct {
	stream client.Stream
}

func (x *reportServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *reportServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *reportServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *reportServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *reportServiceDownload) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ReportService service

type ReportServiceHandler interface {
	FindReports(context.Context, *FindReportsRequest, *FindReportsResponse) error
	FindReport(context.Context, *FindReportRequest, *FindReportResponse) error
	FindReportData(context.Context, *FindReportDataRequest, *FindReportDataResponse) error
	GenerateReportData(context.Context, *GenerateReportDataRequest, *GenerateReportDataResponse) error
	FindCount(context.Context, *CountRequest, *CountResponse) error
	AddReport(context.Context, *AddReportRequest, *AddReportResponse) error
	ModifyReport(context.Context, *ModifyReportRequest, *ModifyReportResponse) error
	DeleteReport(context.Context, *DeleteReportRequest, *DeleteResponse) error
	DeleteSelectReports(context.Context, *DeleteSelectReportsRequest, *DeleteResponse) error
	HardDeleteReports(context.Context, *HardDeleteReportsRequest, *DeleteResponse) error
	RecoverSelectReports(context.Context, *RecoverSelectReportsRequest, *RecoverSelectReportsResponse) error
	// 下载报表数据
	Download(context.Context, *DownloadRequest, ReportService_DownloadStream) error
}

func RegisterReportServiceHandler(s server.Server, hdlr ReportServiceHandler, opts ...server.HandlerOption) error {
	type reportService interface {
		FindReports(ctx context.Context, in *FindReportsRequest, out *FindReportsResponse) error
		FindReport(ctx context.Context, in *FindReportRequest, out *FindReportResponse) error
		FindReportData(ctx context.Context, in *FindReportDataRequest, out *FindReportDataResponse) error
		GenerateReportData(ctx context.Context, in *GenerateReportDataRequest, out *GenerateReportDataResponse) error
		FindCount(ctx context.Context, in *CountRequest, out *CountResponse) error
		AddReport(ctx context.Context, in *AddReportRequest, out *AddReportResponse) error
		ModifyReport(ctx context.Context, in *ModifyReportRequest, out *ModifyReportResponse) error
		DeleteReport(ctx context.Context, in *DeleteReportRequest, out *DeleteResponse) error
		DeleteSelectReports(ctx context.Context, in *DeleteSelectReportsRequest, out *DeleteResponse) error
		HardDeleteReports(ctx context.Context, in *HardDeleteReportsRequest, out *DeleteResponse) error
		RecoverSelectReports(ctx context.Context, in *RecoverSelectReportsRequest, out *RecoverSelectReportsResponse) error
		Download(ctx context.Context, stream server.Stream) error
	}
	type ReportService struct {
		reportService
	}
	h := &reportServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ReportService{h}, opts...))
}

type reportServiceHandler struct {
	ReportServiceHandler
}

func (h *reportServiceHandler) FindReports(ctx context.Context, in *FindReportsRequest, out *FindReportsResponse) error {
	return h.ReportServiceHandler.FindReports(ctx, in, out)
}

func (h *reportServiceHandler) FindReport(ctx context.Context, in *FindReportRequest, out *FindReportResponse) error {
	return h.ReportServiceHandler.FindReport(ctx, in, out)
}

func (h *reportServiceHandler) FindReportData(ctx context.Context, in *FindReportDataRequest, out *FindReportDataResponse) error {
	return h.ReportServiceHandler.FindReportData(ctx, in, out)
}

func (h *reportServiceHandler) GenerateReportData(ctx context.Context, in *GenerateReportDataRequest, out *GenerateReportDataResponse) error {
	return h.ReportServiceHandler.GenerateReportData(ctx, in, out)
}

func (h *reportServiceHandler) FindCount(ctx context.Context, in *CountRequest, out *CountResponse) error {
	return h.ReportServiceHandler.FindCount(ctx, in, out)
}

func (h *reportServiceHandler) AddReport(ctx context.Context, in *AddReportRequest, out *AddReportResponse) error {
	return h.ReportServiceHandler.AddReport(ctx, in, out)
}

func (h *reportServiceHandler) ModifyReport(ctx context.Context, in *ModifyReportRequest, out *ModifyReportResponse) error {
	return h.ReportServiceHandler.ModifyReport(ctx, in, out)
}

func (h *reportServiceHandler) DeleteReport(ctx context.Context, in *DeleteReportRequest, out *DeleteResponse) error {
	return h.ReportServiceHandler.DeleteReport(ctx, in, out)
}

func (h *reportServiceHandler) DeleteSelectReports(ctx context.Context, in *DeleteSelectReportsRequest, out *DeleteResponse) error {
	return h.ReportServiceHandler.DeleteSelectReports(ctx, in, out)
}

func (h *reportServiceHandler) HardDeleteReports(ctx context.Context, in *HardDeleteReportsRequest, out *DeleteResponse) error {
	return h.ReportServiceHandler.HardDeleteReports(ctx, in, out)
}

func (h *reportServiceHandler) RecoverSelectReports(ctx context.Context, in *RecoverSelectReportsRequest, out *RecoverSelectReportsResponse) error {
	return h.ReportServiceHandler.RecoverSelectReports(ctx, in, out)
}

func (h *reportServiceHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(DownloadRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ReportServiceHandler.Download(ctx, m, &reportServiceDownloadStream{stream})
}

type ReportService_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type reportServiceDownloadStream struct {
	stream server.Stream
}

func (x *reportServiceDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *reportServiceDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *reportServiceDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *reportServiceDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *reportServiceDownloadStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
