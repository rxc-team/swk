// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: dashboard.proto

package dashboard

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DashboardService service

func NewDashboardServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DashboardService service

type DashboardService interface {
	FindDashboards(ctx context.Context, in *FindDashboardsRequest, opts ...client.CallOption) (*FindDashboardsResponse, error)
	FindDashboard(ctx context.Context, in *FindDashboardRequest, opts ...client.CallOption) (*FindDashboardResponse, error)
	FindDashboardData(ctx context.Context, in *FindDashboardDataRequest, opts ...client.CallOption) (*FindDashboardDataResponse, error)
	AddDashboard(ctx context.Context, in *AddDashboardRequest, opts ...client.CallOption) (*AddDashboardResponse, error)
	ModifyDashboard(ctx context.Context, in *ModifyDashboardRequest, opts ...client.CallOption) (*ModifyDashboardResponse, error)
	DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectDashboards(ctx context.Context, in *DeleteSelectDashboardsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteDashboards(ctx context.Context, in *HardDeleteDashboardsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	RecoverSelectDashboards(ctx context.Context, in *RecoverSelectDashboardsRequest, opts ...client.CallOption) (*RecoverSelectDashboardsResponse, error)
}

type dashboardService struct {
	c    client.Client
	name string
}

func NewDashboardService(name string, c client.Client) DashboardService {
	return &dashboardService{
		c:    c,
		name: name,
	}
}

func (c *dashboardService) FindDashboards(ctx context.Context, in *FindDashboardsRequest, opts ...client.CallOption) (*FindDashboardsResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.FindDashboards", in)
	out := new(FindDashboardsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) FindDashboard(ctx context.Context, in *FindDashboardRequest, opts ...client.CallOption) (*FindDashboardResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.FindDashboard", in)
	out := new(FindDashboardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) FindDashboardData(ctx context.Context, in *FindDashboardDataRequest, opts ...client.CallOption) (*FindDashboardDataResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.FindDashboardData", in)
	out := new(FindDashboardDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) AddDashboard(ctx context.Context, in *AddDashboardRequest, opts ...client.CallOption) (*AddDashboardResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.AddDashboard", in)
	out := new(AddDashboardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) ModifyDashboard(ctx context.Context, in *ModifyDashboardRequest, opts ...client.CallOption) (*ModifyDashboardResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.ModifyDashboard", in)
	out := new(ModifyDashboardResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.DeleteDashboard", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) DeleteSelectDashboards(ctx context.Context, in *DeleteSelectDashboardsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.DeleteSelectDashboards", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) HardDeleteDashboards(ctx context.Context, in *HardDeleteDashboardsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.HardDeleteDashboards", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardService) RecoverSelectDashboards(ctx context.Context, in *RecoverSelectDashboardsRequest, opts ...client.CallOption) (*RecoverSelectDashboardsResponse, error) {
	req := c.c.NewRequest(c.name, "DashboardService.RecoverSelectDashboards", in)
	out := new(RecoverSelectDashboardsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DashboardService service

type DashboardServiceHandler interface {
	FindDashboards(context.Context, *FindDashboardsRequest, *FindDashboardsResponse) error
	FindDashboard(context.Context, *FindDashboardRequest, *FindDashboardResponse) error
	FindDashboardData(context.Context, *FindDashboardDataRequest, *FindDashboardDataResponse) error
	AddDashboard(context.Context, *AddDashboardRequest, *AddDashboardResponse) error
	ModifyDashboard(context.Context, *ModifyDashboardRequest, *ModifyDashboardResponse) error
	DeleteDashboard(context.Context, *DeleteDashboardRequest, *DeleteResponse) error
	DeleteSelectDashboards(context.Context, *DeleteSelectDashboardsRequest, *DeleteResponse) error
	HardDeleteDashboards(context.Context, *HardDeleteDashboardsRequest, *DeleteResponse) error
	RecoverSelectDashboards(context.Context, *RecoverSelectDashboardsRequest, *RecoverSelectDashboardsResponse) error
}

func RegisterDashboardServiceHandler(s server.Server, hdlr DashboardServiceHandler, opts ...server.HandlerOption) error {
	type dashboardService interface {
		FindDashboards(ctx context.Context, in *FindDashboardsRequest, out *FindDashboardsResponse) error
		FindDashboard(ctx context.Context, in *FindDashboardRequest, out *FindDashboardResponse) error
		FindDashboardData(ctx context.Context, in *FindDashboardDataRequest, out *FindDashboardDataResponse) error
		AddDashboard(ctx context.Context, in *AddDashboardRequest, out *AddDashboardResponse) error
		ModifyDashboard(ctx context.Context, in *ModifyDashboardRequest, out *ModifyDashboardResponse) error
		DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, out *DeleteResponse) error
		DeleteSelectDashboards(ctx context.Context, in *DeleteSelectDashboardsRequest, out *DeleteResponse) error
		HardDeleteDashboards(ctx context.Context, in *HardDeleteDashboardsRequest, out *DeleteResponse) error
		RecoverSelectDashboards(ctx context.Context, in *RecoverSelectDashboardsRequest, out *RecoverSelectDashboardsResponse) error
	}
	type DashboardService struct {
		dashboardService
	}
	h := &dashboardServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DashboardService{h}, opts...))
}

type dashboardServiceHandler struct {
	DashboardServiceHandler
}

func (h *dashboardServiceHandler) FindDashboards(ctx context.Context, in *FindDashboardsRequest, out *FindDashboardsResponse) error {
	return h.DashboardServiceHandler.FindDashboards(ctx, in, out)
}

func (h *dashboardServiceHandler) FindDashboard(ctx context.Context, in *FindDashboardRequest, out *FindDashboardResponse) error {
	return h.DashboardServiceHandler.FindDashboard(ctx, in, out)
}

func (h *dashboardServiceHandler) FindDashboardData(ctx context.Context, in *FindDashboardDataRequest, out *FindDashboardDataResponse) error {
	return h.DashboardServiceHandler.FindDashboardData(ctx, in, out)
}

func (h *dashboardServiceHandler) AddDashboard(ctx context.Context, in *AddDashboardRequest, out *AddDashboardResponse) error {
	return h.DashboardServiceHandler.AddDashboard(ctx, in, out)
}

func (h *dashboardServiceHandler) ModifyDashboard(ctx context.Context, in *ModifyDashboardRequest, out *ModifyDashboardResponse) error {
	return h.DashboardServiceHandler.ModifyDashboard(ctx, in, out)
}

func (h *dashboardServiceHandler) DeleteDashboard(ctx context.Context, in *DeleteDashboardRequest, out *DeleteResponse) error {
	return h.DashboardServiceHandler.DeleteDashboard(ctx, in, out)
}

func (h *dashboardServiceHandler) DeleteSelectDashboards(ctx context.Context, in *DeleteSelectDashboardsRequest, out *DeleteResponse) error {
	return h.DashboardServiceHandler.DeleteSelectDashboards(ctx, in, out)
}

func (h *dashboardServiceHandler) HardDeleteDashboards(ctx context.Context, in *HardDeleteDashboardsRequest, out *DeleteResponse) error {
	return h.DashboardServiceHandler.HardDeleteDashboards(ctx, in, out)
}

func (h *dashboardServiceHandler) RecoverSelectDashboards(ctx context.Context, in *RecoverSelectDashboardsRequest, out *RecoverSelectDashboardsResponse) error {
	return h.DashboardServiceHandler.RecoverSelectDashboards(ctx, in, out)
}
