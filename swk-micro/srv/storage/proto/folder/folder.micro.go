// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: folder.proto

package folder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FolderService service

func NewFolderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FolderService service

type FolderService interface {
	FindFolders(ctx context.Context, in *FindFoldersRequest, opts ...client.CallOption) (*FindFoldersResponse, error)
	FindFolder(ctx context.Context, in *FindFolderRequest, opts ...client.CallOption) (*FindFolderResponse, error)
	AddFolder(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifyFolder(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteFolder(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectFolders(ctx context.Context, in *DeleteSelectFoldersRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteFolders(ctx context.Context, in *HardDeleteFoldersRequest, opts ...client.CallOption) (*DeleteResponse, error)
	RecoverSelectFolders(ctx context.Context, in *RecoverSelectFoldersRequest, opts ...client.CallOption) (*RecoverSelectFoldersResponse, error)
}

type folderService struct {
	c    client.Client
	name string
}

func NewFolderService(name string, c client.Client) FolderService {
	return &folderService{
		c:    c,
		name: name,
	}
}

func (c *folderService) FindFolders(ctx context.Context, in *FindFoldersRequest, opts ...client.CallOption) (*FindFoldersResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.FindFolders", in)
	out := new(FindFoldersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) FindFolder(ctx context.Context, in *FindFolderRequest, opts ...client.CallOption) (*FindFolderResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.FindFolder", in)
	out := new(FindFolderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) AddFolder(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.AddFolder", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) ModifyFolder(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.ModifyFolder", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) DeleteFolder(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.DeleteFolder", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) DeleteSelectFolders(ctx context.Context, in *DeleteSelectFoldersRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.DeleteSelectFolders", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) HardDeleteFolders(ctx context.Context, in *HardDeleteFoldersRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.HardDeleteFolders", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *folderService) RecoverSelectFolders(ctx context.Context, in *RecoverSelectFoldersRequest, opts ...client.CallOption) (*RecoverSelectFoldersResponse, error) {
	req := c.c.NewRequest(c.name, "FolderService.RecoverSelectFolders", in)
	out := new(RecoverSelectFoldersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FolderService service

type FolderServiceHandler interface {
	FindFolders(context.Context, *FindFoldersRequest, *FindFoldersResponse) error
	FindFolder(context.Context, *FindFolderRequest, *FindFolderResponse) error
	AddFolder(context.Context, *AddRequest, *AddResponse) error
	ModifyFolder(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteFolder(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteSelectFolders(context.Context, *DeleteSelectFoldersRequest, *DeleteResponse) error
	HardDeleteFolders(context.Context, *HardDeleteFoldersRequest, *DeleteResponse) error
	RecoverSelectFolders(context.Context, *RecoverSelectFoldersRequest, *RecoverSelectFoldersResponse) error
}

func RegisterFolderServiceHandler(s server.Server, hdlr FolderServiceHandler, opts ...server.HandlerOption) error {
	type folderService interface {
		FindFolders(ctx context.Context, in *FindFoldersRequest, out *FindFoldersResponse) error
		FindFolder(ctx context.Context, in *FindFolderRequest, out *FindFolderResponse) error
		AddFolder(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifyFolder(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteFolder(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		DeleteSelectFolders(ctx context.Context, in *DeleteSelectFoldersRequest, out *DeleteResponse) error
		HardDeleteFolders(ctx context.Context, in *HardDeleteFoldersRequest, out *DeleteResponse) error
		RecoverSelectFolders(ctx context.Context, in *RecoverSelectFoldersRequest, out *RecoverSelectFoldersResponse) error
	}
	type FolderService struct {
		folderService
	}
	h := &folderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FolderService{h}, opts...))
}

type folderServiceHandler struct {
	FolderServiceHandler
}

func (h *folderServiceHandler) FindFolders(ctx context.Context, in *FindFoldersRequest, out *FindFoldersResponse) error {
	return h.FolderServiceHandler.FindFolders(ctx, in, out)
}

func (h *folderServiceHandler) FindFolder(ctx context.Context, in *FindFolderRequest, out *FindFolderResponse) error {
	return h.FolderServiceHandler.FindFolder(ctx, in, out)
}

func (h *folderServiceHandler) AddFolder(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.FolderServiceHandler.AddFolder(ctx, in, out)
}

func (h *folderServiceHandler) ModifyFolder(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.FolderServiceHandler.ModifyFolder(ctx, in, out)
}

func (h *folderServiceHandler) DeleteFolder(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.FolderServiceHandler.DeleteFolder(ctx, in, out)
}

func (h *folderServiceHandler) DeleteSelectFolders(ctx context.Context, in *DeleteSelectFoldersRequest, out *DeleteResponse) error {
	return h.FolderServiceHandler.DeleteSelectFolders(ctx, in, out)
}

func (h *folderServiceHandler) HardDeleteFolders(ctx context.Context, in *HardDeleteFoldersRequest, out *DeleteResponse) error {
	return h.FolderServiceHandler.HardDeleteFolders(ctx, in, out)
}

func (h *folderServiceHandler) RecoverSelectFolders(ctx context.Context, in *RecoverSelectFoldersRequest, out *RecoverSelectFoldersResponse) error {
	return h.FolderServiceHandler.RecoverSelectFolders(ctx, in, out)
}
