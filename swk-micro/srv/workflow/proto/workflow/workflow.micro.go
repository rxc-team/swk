// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: workflow.proto

package workflow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WfService service

func NewWfServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WfService service

type WfService interface {
	FindWorkflows(ctx context.Context, in *WorkflowsRequest, opts ...client.CallOption) (*WorkflowsResponse, error)
	FindUserWorkflows(ctx context.Context, in *UserWorkflowsRequest, opts ...client.CallOption) (*UserWorkflowsResponse, error)
	FindWorkflow(ctx context.Context, in *WorkflowRequest, opts ...client.CallOption) (*WorkflowResponse, error)
	AddWorkflow(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifyWorkflow(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteWorkflow(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type wfService struct {
	c    client.Client
	name string
}

func NewWfService(name string, c client.Client) WfService {
	return &wfService{
		c:    c,
		name: name,
	}
}

func (c *wfService) FindWorkflows(ctx context.Context, in *WorkflowsRequest, opts ...client.CallOption) (*WorkflowsResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.FindWorkflows", in)
	out := new(WorkflowsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wfService) FindUserWorkflows(ctx context.Context, in *UserWorkflowsRequest, opts ...client.CallOption) (*UserWorkflowsResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.FindUserWorkflows", in)
	out := new(UserWorkflowsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wfService) FindWorkflow(ctx context.Context, in *WorkflowRequest, opts ...client.CallOption) (*WorkflowResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.FindWorkflow", in)
	out := new(WorkflowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wfService) AddWorkflow(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.AddWorkflow", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wfService) ModifyWorkflow(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.ModifyWorkflow", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wfService) DeleteWorkflow(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "WfService.DeleteWorkflow", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WfService service

type WfServiceHandler interface {
	FindWorkflows(context.Context, *WorkflowsRequest, *WorkflowsResponse) error
	FindUserWorkflows(context.Context, *UserWorkflowsRequest, *UserWorkflowsResponse) error
	FindWorkflow(context.Context, *WorkflowRequest, *WorkflowResponse) error
	AddWorkflow(context.Context, *AddRequest, *AddResponse) error
	ModifyWorkflow(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteWorkflow(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterWfServiceHandler(s server.Server, hdlr WfServiceHandler, opts ...server.HandlerOption) error {
	type wfService interface {
		FindWorkflows(ctx context.Context, in *WorkflowsRequest, out *WorkflowsResponse) error
		FindUserWorkflows(ctx context.Context, in *UserWorkflowsRequest, out *UserWorkflowsResponse) error
		FindWorkflow(ctx context.Context, in *WorkflowRequest, out *WorkflowResponse) error
		AddWorkflow(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifyWorkflow(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteWorkflow(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type WfService struct {
		wfService
	}
	h := &wfServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WfService{h}, opts...))
}

type wfServiceHandler struct {
	WfServiceHandler
}

func (h *wfServiceHandler) FindWorkflows(ctx context.Context, in *WorkflowsRequest, out *WorkflowsResponse) error {
	return h.WfServiceHandler.FindWorkflows(ctx, in, out)
}

func (h *wfServiceHandler) FindUserWorkflows(ctx context.Context, in *UserWorkflowsRequest, out *UserWorkflowsResponse) error {
	return h.WfServiceHandler.FindUserWorkflows(ctx, in, out)
}

func (h *wfServiceHandler) FindWorkflow(ctx context.Context, in *WorkflowRequest, out *WorkflowResponse) error {
	return h.WfServiceHandler.FindWorkflow(ctx, in, out)
}

func (h *wfServiceHandler) AddWorkflow(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.WfServiceHandler.AddWorkflow(ctx, in, out)
}

func (h *wfServiceHandler) ModifyWorkflow(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.WfServiceHandler.ModifyWorkflow(ctx, in, out)
}

func (h *wfServiceHandler) DeleteWorkflow(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.WfServiceHandler.DeleteWorkflow(ctx, in, out)
}
