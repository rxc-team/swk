// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: node.proto

package node

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for NodeService service

func NewNodeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for NodeService service

type NodeService interface {
	FindNodes(ctx context.Context, in *NodesRequest, opts ...client.CallOption) (*NodesResponse, error)
	FindNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error)
	AddNode(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteNode(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type nodeService struct {
	c    client.Client
	name string
}

func NewNodeService(name string, c client.Client) NodeService {
	return &nodeService{
		c:    c,
		name: name,
	}
}

func (c *nodeService) FindNodes(ctx context.Context, in *NodesRequest, opts ...client.CallOption) (*NodesResponse, error) {
	req := c.c.NewRequest(c.name, "NodeService.FindNodes", in)
	out := new(NodesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) FindNode(ctx context.Context, in *NodeRequest, opts ...client.CallOption) (*NodeResponse, error) {
	req := c.c.NewRequest(c.name, "NodeService.FindNode", in)
	out := new(NodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) AddNode(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "NodeService.AddNode", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) DeleteNode(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "NodeService.DeleteNode", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeService service

type NodeServiceHandler interface {
	FindNodes(context.Context, *NodesRequest, *NodesResponse) error
	FindNode(context.Context, *NodeRequest, *NodeResponse) error
	AddNode(context.Context, *AddRequest, *AddResponse) error
	DeleteNode(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterNodeServiceHandler(s server.Server, hdlr NodeServiceHandler, opts ...server.HandlerOption) error {
	type nodeService interface {
		FindNodes(ctx context.Context, in *NodesRequest, out *NodesResponse) error
		FindNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error
		AddNode(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteNode(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type NodeService struct {
		nodeService
	}
	h := &nodeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&NodeService{h}, opts...))
}

type nodeServiceHandler struct {
	NodeServiceHandler
}

func (h *nodeServiceHandler) FindNodes(ctx context.Context, in *NodesRequest, out *NodesResponse) error {
	return h.NodeServiceHandler.FindNodes(ctx, in, out)
}

func (h *nodeServiceHandler) FindNode(ctx context.Context, in *NodeRequest, out *NodeResponse) error {
	return h.NodeServiceHandler.FindNode(ctx, in, out)
}

func (h *nodeServiceHandler) AddNode(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.NodeServiceHandler.AddNode(ctx, in, out)
}

func (h *nodeServiceHandler) DeleteNode(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.NodeServiceHandler.DeleteNode(ctx, in, out)
}
