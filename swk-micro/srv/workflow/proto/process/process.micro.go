// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: process.proto

package process

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ProcessService service

func NewProcessServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ProcessService service

type ProcessService interface {
	FindProcesses(ctx context.Context, in *ProcessesRequest, opts ...client.CallOption) (*ProcessesResponse, error)
	FindsProcesses(ctx context.Context, in *FindsProcessesRequest, opts ...client.CallOption) (*FindsProcessesResponse, error)
	AddProcess(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifyProcess(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteProcess(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type processService struct {
	c    client.Client
	name string
}

func NewProcessService(name string, c client.Client) ProcessService {
	return &processService{
		c:    c,
		name: name,
	}
}

func (c *processService) FindProcesses(ctx context.Context, in *ProcessesRequest, opts ...client.CallOption) (*ProcessesResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.FindProcesses", in)
	out := new(ProcessesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) FindsProcesses(ctx context.Context, in *FindsProcessesRequest, opts ...client.CallOption) (*FindsProcessesResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.FindsProcesses", in)
	out := new(FindsProcessesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) AddProcess(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.AddProcess", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) ModifyProcess(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.ModifyProcess", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *processService) DeleteProcess(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ProcessService.DeleteProcess", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProcessService service

type ProcessServiceHandler interface {
	FindProcesses(context.Context, *ProcessesRequest, *ProcessesResponse) error
	FindsProcesses(context.Context, *FindsProcessesRequest, *FindsProcessesResponse) error
	AddProcess(context.Context, *AddRequest, *AddResponse) error
	ModifyProcess(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteProcess(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterProcessServiceHandler(s server.Server, hdlr ProcessServiceHandler, opts ...server.HandlerOption) error {
	type processService interface {
		FindProcesses(ctx context.Context, in *ProcessesRequest, out *ProcessesResponse) error
		FindsProcesses(ctx context.Context, in *FindsProcessesRequest, out *FindsProcessesResponse) error
		AddProcess(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifyProcess(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteProcess(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type ProcessService struct {
		processService
	}
	h := &processServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ProcessService{h}, opts...))
}

type processServiceHandler struct {
	ProcessServiceHandler
}

func (h *processServiceHandler) FindProcesses(ctx context.Context, in *ProcessesRequest, out *ProcessesResponse) error {
	return h.ProcessServiceHandler.FindProcesses(ctx, in, out)
}

func (h *processServiceHandler) FindsProcesses(ctx context.Context, in *FindsProcessesRequest, out *FindsProcessesResponse) error {
	return h.ProcessServiceHandler.FindsProcesses(ctx, in, out)
}

func (h *processServiceHandler) AddProcess(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ProcessServiceHandler.AddProcess(ctx, in, out)
}

func (h *processServiceHandler) ModifyProcess(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.ProcessServiceHandler.ModifyProcess(ctx, in, out)
}

func (h *processServiceHandler) DeleteProcess(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ProcessServiceHandler.DeleteProcess(ctx, in, out)
}
