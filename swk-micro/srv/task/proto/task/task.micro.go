// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: task.proto

package task

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TaskService service

func NewTaskServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TaskService service

type TaskService interface {
	FindTasks(ctx context.Context, in *TasksRequest, opts ...client.CallOption) (*TasksResponse, error)
	FindTask(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*TaskResponse, error)
	AddTask(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifyTask(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteTask(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type taskService struct {
	c    client.Client
	name string
}

func NewTaskService(name string, c client.Client) TaskService {
	return &taskService{
		c:    c,
		name: name,
	}
}

func (c *taskService) FindTasks(ctx context.Context, in *TasksRequest, opts ...client.CallOption) (*TasksResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.FindTasks", in)
	out := new(TasksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) FindTask(ctx context.Context, in *TaskRequest, opts ...client.CallOption) (*TaskResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.FindTask", in)
	out := new(TaskResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) AddTask(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.AddTask", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) ModifyTask(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.ModifyTask", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskService) DeleteTask(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "TaskService.DeleteTask", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceHandler interface {
	FindTasks(context.Context, *TasksRequest, *TasksResponse) error
	FindTask(context.Context, *TaskRequest, *TaskResponse) error
	AddTask(context.Context, *AddRequest, *AddResponse) error
	ModifyTask(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteTask(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterTaskServiceHandler(s server.Server, hdlr TaskServiceHandler, opts ...server.HandlerOption) error {
	type taskService interface {
		FindTasks(ctx context.Context, in *TasksRequest, out *TasksResponse) error
		FindTask(ctx context.Context, in *TaskRequest, out *TaskResponse) error
		AddTask(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifyTask(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteTask(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type TaskService struct {
		taskService
	}
	h := &taskServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TaskService{h}, opts...))
}

type taskServiceHandler struct {
	TaskServiceHandler
}

func (h *taskServiceHandler) FindTasks(ctx context.Context, in *TasksRequest, out *TasksResponse) error {
	return h.TaskServiceHandler.FindTasks(ctx, in, out)
}

func (h *taskServiceHandler) FindTask(ctx context.Context, in *TaskRequest, out *TaskResponse) error {
	return h.TaskServiceHandler.FindTask(ctx, in, out)
}

func (h *taskServiceHandler) AddTask(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.TaskServiceHandler.AddTask(ctx, in, out)
}

func (h *taskServiceHandler) ModifyTask(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.TaskServiceHandler.ModifyTask(ctx, in, out)
}

func (h *taskServiceHandler) DeleteTask(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.TaskServiceHandler.DeleteTask(ctx, in, out)
}
