// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: schedule.proto

package schedule

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ScheduleService service

func NewScheduleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ScheduleService service

type ScheduleService interface {
	FindSchedules(ctx context.Context, in *SchedulesRequest, opts ...client.CallOption) (*SchedulesResponse, error)
	FindSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error)
	AddSchedule(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifySchedule(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteSchedule(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	AddScheduleNameUniqueIndex(ctx context.Context, in *ScheduleNameIndexRequest, opts ...client.CallOption) (*ScheduleNameIndexResponse, error)
}

type scheduleService struct {
	c    client.Client
	name string
}

func NewScheduleService(name string, c client.Client) ScheduleService {
	return &scheduleService{
		c:    c,
		name: name,
	}
}

func (c *scheduleService) FindSchedules(ctx context.Context, in *SchedulesRequest, opts ...client.CallOption) (*SchedulesResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.FindSchedules", in)
	out := new(SchedulesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) FindSchedule(ctx context.Context, in *ScheduleRequest, opts ...client.CallOption) (*ScheduleResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.FindSchedule", in)
	out := new(ScheduleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) AddSchedule(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.AddSchedule", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) ModifySchedule(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.ModifySchedule", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) DeleteSchedule(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.DeleteSchedule", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleService) AddScheduleNameUniqueIndex(ctx context.Context, in *ScheduleNameIndexRequest, opts ...client.CallOption) (*ScheduleNameIndexResponse, error) {
	req := c.c.NewRequest(c.name, "ScheduleService.AddScheduleNameUniqueIndex", in)
	out := new(ScheduleNameIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScheduleService service

type ScheduleServiceHandler interface {
	FindSchedules(context.Context, *SchedulesRequest, *SchedulesResponse) error
	FindSchedule(context.Context, *ScheduleRequest, *ScheduleResponse) error
	AddSchedule(context.Context, *AddRequest, *AddResponse) error
	ModifySchedule(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteSchedule(context.Context, *DeleteRequest, *DeleteResponse) error
	AddScheduleNameUniqueIndex(context.Context, *ScheduleNameIndexRequest, *ScheduleNameIndexResponse) error
}

func RegisterScheduleServiceHandler(s server.Server, hdlr ScheduleServiceHandler, opts ...server.HandlerOption) error {
	type scheduleService interface {
		FindSchedules(ctx context.Context, in *SchedulesRequest, out *SchedulesResponse) error
		FindSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error
		AddSchedule(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifySchedule(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteSchedule(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		AddScheduleNameUniqueIndex(ctx context.Context, in *ScheduleNameIndexRequest, out *ScheduleNameIndexResponse) error
	}
	type ScheduleService struct {
		scheduleService
	}
	h := &scheduleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ScheduleService{h}, opts...))
}

type scheduleServiceHandler struct {
	ScheduleServiceHandler
}

func (h *scheduleServiceHandler) FindSchedules(ctx context.Context, in *SchedulesRequest, out *SchedulesResponse) error {
	return h.ScheduleServiceHandler.FindSchedules(ctx, in, out)
}

func (h *scheduleServiceHandler) FindSchedule(ctx context.Context, in *ScheduleRequest, out *ScheduleResponse) error {
	return h.ScheduleServiceHandler.FindSchedule(ctx, in, out)
}

func (h *scheduleServiceHandler) AddSchedule(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ScheduleServiceHandler.AddSchedule(ctx, in, out)
}

func (h *scheduleServiceHandler) ModifySchedule(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.ScheduleServiceHandler.ModifySchedule(ctx, in, out)
}

func (h *scheduleServiceHandler) DeleteSchedule(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ScheduleServiceHandler.DeleteSchedule(ctx, in, out)
}

func (h *scheduleServiceHandler) AddScheduleNameUniqueIndex(ctx context.Context, in *ScheduleNameIndexRequest, out *ScheduleNameIndexResponse) error {
	return h.ScheduleServiceHandler.AddScheduleNameUniqueIndex(ctx, in, out)
}
