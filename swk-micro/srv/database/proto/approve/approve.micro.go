// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: approve.proto

package approve

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ApproveService service

func NewApproveServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ApproveService service

type ApproveService interface {
	FindItems(ctx context.Context, in *ItemsRequest, opts ...client.CallOption) (*ItemsResponse, error)
	FindCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error)
	FindItem(ctx context.Context, in *ItemRequest, opts ...client.CallOption) (*ItemResponse, error)
	AddItem(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteItems(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type approveService struct {
	c    client.Client
	name string
}

func NewApproveService(name string, c client.Client) ApproveService {
	return &approveService{
		c:    c,
		name: name,
	}
}

func (c *approveService) FindItems(ctx context.Context, in *ItemsRequest, opts ...client.CallOption) (*ItemsResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveService.FindItems", in)
	out := new(ItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveService) FindCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveService.FindCount", in)
	out := new(CountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveService) FindItem(ctx context.Context, in *ItemRequest, opts ...client.CallOption) (*ItemResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveService.FindItem", in)
	out := new(ItemResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveService) AddItem(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveService.AddItem", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveService) DeleteItems(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ApproveService.DeleteItems", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApproveService service

type ApproveServiceHandler interface {
	FindItems(context.Context, *ItemsRequest, *ItemsResponse) error
	FindCount(context.Context, *CountRequest, *CountResponse) error
	FindItem(context.Context, *ItemRequest, *ItemResponse) error
	AddItem(context.Context, *AddRequest, *AddResponse) error
	DeleteItems(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterApproveServiceHandler(s server.Server, hdlr ApproveServiceHandler, opts ...server.HandlerOption) error {
	type approveService interface {
		FindItems(ctx context.Context, in *ItemsRequest, out *ItemsResponse) error
		FindCount(ctx context.Context, in *CountRequest, out *CountResponse) error
		FindItem(ctx context.Context, in *ItemRequest, out *ItemResponse) error
		AddItem(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteItems(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type ApproveService struct {
		approveService
	}
	h := &approveServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ApproveService{h}, opts...))
}

type approveServiceHandler struct {
	ApproveServiceHandler
}

func (h *approveServiceHandler) FindItems(ctx context.Context, in *ItemsRequest, out *ItemsResponse) error {
	return h.ApproveServiceHandler.FindItems(ctx, in, out)
}

func (h *approveServiceHandler) FindCount(ctx context.Context, in *CountRequest, out *CountResponse) error {
	return h.ApproveServiceHandler.FindCount(ctx, in, out)
}

func (h *approveServiceHandler) FindItem(ctx context.Context, in *ItemRequest, out *ItemResponse) error {
	return h.ApproveServiceHandler.FindItem(ctx, in, out)
}

func (h *approveServiceHandler) AddItem(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ApproveServiceHandler.AddItem(ctx, in, out)
}

func (h *approveServiceHandler) DeleteItems(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ApproveServiceHandler.DeleteItems(ctx, in, out)
}
