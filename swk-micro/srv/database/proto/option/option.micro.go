// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: option.proto

package option

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OptionService service

func NewOptionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OptionService service

type OptionService interface {
	FindOptions(ctx context.Context, in *FindOptionsRequest, opts ...client.CallOption) (*FindOptionsResponse, error)
	FindOptionLabels(ctx context.Context, in *FindOptionLabelsRequest, opts ...client.CallOption) (*FindOptionLabelsResponse, error)
	FindOptionLable(ctx context.Context, in *FindOptionLabelRequest, opts ...client.CallOption) (*FindOptionLabelResponse, error)
	FindOption(ctx context.Context, in *FindOptionRequest, opts ...client.CallOption) (*FindOptionResponse, error)
	AddOption(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteOptionChild(ctx context.Context, in *DeleteChildRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteOption(ctx context.Context, in *DeleteOptionRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectOptions(ctx context.Context, in *DeleteSelectOptionsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteOptionChild(ctx context.Context, in *HardDeleteChildRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteOptions(ctx context.Context, in *HardDeleteOptionsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	RecoverOptionChild(ctx context.Context, in *RecoverChildRequest, opts ...client.CallOption) (*RecoverChildResponse, error)
	RecoverSelectOptions(ctx context.Context, in *RecoverSelectOptionsRequest, opts ...client.CallOption) (*RecoverSelectOptionsResponse, error)
}

type optionService struct {
	c    client.Client
	name string
}

func NewOptionService(name string, c client.Client) OptionService {
	return &optionService{
		c:    c,
		name: name,
	}
}

func (c *optionService) FindOptions(ctx context.Context, in *FindOptionsRequest, opts ...client.CallOption) (*FindOptionsResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.FindOptions", in)
	out := new(FindOptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) FindOptionLabels(ctx context.Context, in *FindOptionLabelsRequest, opts ...client.CallOption) (*FindOptionLabelsResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.FindOptionLabels", in)
	out := new(FindOptionLabelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) FindOptionLable(ctx context.Context, in *FindOptionLabelRequest, opts ...client.CallOption) (*FindOptionLabelResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.FindOptionLable", in)
	out := new(FindOptionLabelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) FindOption(ctx context.Context, in *FindOptionRequest, opts ...client.CallOption) (*FindOptionResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.FindOption", in)
	out := new(FindOptionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) AddOption(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.AddOption", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) DeleteOptionChild(ctx context.Context, in *DeleteChildRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.DeleteOptionChild", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) DeleteOption(ctx context.Context, in *DeleteOptionRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.DeleteOption", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) DeleteSelectOptions(ctx context.Context, in *DeleteSelectOptionsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.DeleteSelectOptions", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) HardDeleteOptionChild(ctx context.Context, in *HardDeleteChildRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.HardDeleteOptionChild", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) HardDeleteOptions(ctx context.Context, in *HardDeleteOptionsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.HardDeleteOptions", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) RecoverOptionChild(ctx context.Context, in *RecoverChildRequest, opts ...client.CallOption) (*RecoverChildResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.RecoverOptionChild", in)
	out := new(RecoverChildResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optionService) RecoverSelectOptions(ctx context.Context, in *RecoverSelectOptionsRequest, opts ...client.CallOption) (*RecoverSelectOptionsResponse, error) {
	req := c.c.NewRequest(c.name, "OptionService.RecoverSelectOptions", in)
	out := new(RecoverSelectOptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OptionService service

type OptionServiceHandler interface {
	FindOptions(context.Context, *FindOptionsRequest, *FindOptionsResponse) error
	FindOptionLabels(context.Context, *FindOptionLabelsRequest, *FindOptionLabelsResponse) error
	FindOptionLable(context.Context, *FindOptionLabelRequest, *FindOptionLabelResponse) error
	FindOption(context.Context, *FindOptionRequest, *FindOptionResponse) error
	AddOption(context.Context, *AddRequest, *AddResponse) error
	DeleteOptionChild(context.Context, *DeleteChildRequest, *DeleteResponse) error
	DeleteOption(context.Context, *DeleteOptionRequest, *DeleteResponse) error
	DeleteSelectOptions(context.Context, *DeleteSelectOptionsRequest, *DeleteResponse) error
	HardDeleteOptionChild(context.Context, *HardDeleteChildRequest, *DeleteResponse) error
	HardDeleteOptions(context.Context, *HardDeleteOptionsRequest, *DeleteResponse) error
	RecoverOptionChild(context.Context, *RecoverChildRequest, *RecoverChildResponse) error
	RecoverSelectOptions(context.Context, *RecoverSelectOptionsRequest, *RecoverSelectOptionsResponse) error
}

func RegisterOptionServiceHandler(s server.Server, hdlr OptionServiceHandler, opts ...server.HandlerOption) error {
	type optionService interface {
		FindOptions(ctx context.Context, in *FindOptionsRequest, out *FindOptionsResponse) error
		FindOptionLabels(ctx context.Context, in *FindOptionLabelsRequest, out *FindOptionLabelsResponse) error
		FindOptionLable(ctx context.Context, in *FindOptionLabelRequest, out *FindOptionLabelResponse) error
		FindOption(ctx context.Context, in *FindOptionRequest, out *FindOptionResponse) error
		AddOption(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteOptionChild(ctx context.Context, in *DeleteChildRequest, out *DeleteResponse) error
		DeleteOption(ctx context.Context, in *DeleteOptionRequest, out *DeleteResponse) error
		DeleteSelectOptions(ctx context.Context, in *DeleteSelectOptionsRequest, out *DeleteResponse) error
		HardDeleteOptionChild(ctx context.Context, in *HardDeleteChildRequest, out *DeleteResponse) error
		HardDeleteOptions(ctx context.Context, in *HardDeleteOptionsRequest, out *DeleteResponse) error
		RecoverOptionChild(ctx context.Context, in *RecoverChildRequest, out *RecoverChildResponse) error
		RecoverSelectOptions(ctx context.Context, in *RecoverSelectOptionsRequest, out *RecoverSelectOptionsResponse) error
	}
	type OptionService struct {
		optionService
	}
	h := &optionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&OptionService{h}, opts...))
}

type optionServiceHandler struct {
	OptionServiceHandler
}

func (h *optionServiceHandler) FindOptions(ctx context.Context, in *FindOptionsRequest, out *FindOptionsResponse) error {
	return h.OptionServiceHandler.FindOptions(ctx, in, out)
}

func (h *optionServiceHandler) FindOptionLabels(ctx context.Context, in *FindOptionLabelsRequest, out *FindOptionLabelsResponse) error {
	return h.OptionServiceHandler.FindOptionLabels(ctx, in, out)
}

func (h *optionServiceHandler) FindOptionLable(ctx context.Context, in *FindOptionLabelRequest, out *FindOptionLabelResponse) error {
	return h.OptionServiceHandler.FindOptionLable(ctx, in, out)
}

func (h *optionServiceHandler) FindOption(ctx context.Context, in *FindOptionRequest, out *FindOptionResponse) error {
	return h.OptionServiceHandler.FindOption(ctx, in, out)
}

func (h *optionServiceHandler) AddOption(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.OptionServiceHandler.AddOption(ctx, in, out)
}

func (h *optionServiceHandler) DeleteOptionChild(ctx context.Context, in *DeleteChildRequest, out *DeleteResponse) error {
	return h.OptionServiceHandler.DeleteOptionChild(ctx, in, out)
}

func (h *optionServiceHandler) DeleteOption(ctx context.Context, in *DeleteOptionRequest, out *DeleteResponse) error {
	return h.OptionServiceHandler.DeleteOption(ctx, in, out)
}

func (h *optionServiceHandler) DeleteSelectOptions(ctx context.Context, in *DeleteSelectOptionsRequest, out *DeleteResponse) error {
	return h.OptionServiceHandler.DeleteSelectOptions(ctx, in, out)
}

func (h *optionServiceHandler) HardDeleteOptionChild(ctx context.Context, in *HardDeleteChildRequest, out *DeleteResponse) error {
	return h.OptionServiceHandler.HardDeleteOptionChild(ctx, in, out)
}

func (h *optionServiceHandler) HardDeleteOptions(ctx context.Context, in *HardDeleteOptionsRequest, out *DeleteResponse) error {
	return h.OptionServiceHandler.HardDeleteOptions(ctx, in, out)
}

func (h *optionServiceHandler) RecoverOptionChild(ctx context.Context, in *RecoverChildRequest, out *RecoverChildResponse) error {
	return h.OptionServiceHandler.RecoverOptionChild(ctx, in, out)
}

func (h *optionServiceHandler) RecoverSelectOptions(ctx context.Context, in *RecoverSelectOptionsRequest, out *RecoverSelectOptionsResponse) error {
	return h.OptionServiceHandler.RecoverSelectOptions(ctx, in, out)
}
