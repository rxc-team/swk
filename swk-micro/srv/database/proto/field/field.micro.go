// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: field.proto

package field

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for FieldService service

func NewFieldServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for FieldService service

type FieldService interface {
	FindAppFields(ctx context.Context, in *AppFieldsRequest, opts ...client.CallOption) (*AppFieldsResponse, error)
	FindFields(ctx context.Context, in *FieldsRequest, opts ...client.CallOption) (*FieldsResponse, error)
	FindField(ctx context.Context, in *FieldRequest, opts ...client.CallOption) (*FieldResponse, error)
	VerifyFunc(ctx context.Context, in *VerifyFuncRequest, opts ...client.CallOption) (*VerifyFuncResponse, error)
	AddField(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	BlukAddField(ctx context.Context, in *BlukAddRequest, opts ...client.CallOption) (*BlukAddResponse, error)
	ModifyField(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	DeleteField(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteDatastoreFields(ctx context.Context, in *DeleteDatastoreFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectFields(ctx context.Context, in *DeleteSelectFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteFields(ctx context.Context, in *HardDeleteFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error)
	RecoverSelectFields(ctx context.Context, in *RecoverSelectFieldsRequest, opts ...client.CallOption) (*RecoverSelectFieldsResponse, error)
	SetSequenceValue(ctx context.Context, in *SetSequenceValueRequest, opts ...client.CallOption) (*SetSequenceValueResponse, error)
}

type fieldService struct {
	c    client.Client
	name string
}

func NewFieldService(name string, c client.Client) FieldService {
	return &fieldService{
		c:    c,
		name: name,
	}
}

func (c *fieldService) FindAppFields(ctx context.Context, in *AppFieldsRequest, opts ...client.CallOption) (*AppFieldsResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.FindAppFields", in)
	out := new(AppFieldsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) FindFields(ctx context.Context, in *FieldsRequest, opts ...client.CallOption) (*FieldsResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.FindFields", in)
	out := new(FieldsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) FindField(ctx context.Context, in *FieldRequest, opts ...client.CallOption) (*FieldResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.FindField", in)
	out := new(FieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) VerifyFunc(ctx context.Context, in *VerifyFuncRequest, opts ...client.CallOption) (*VerifyFuncResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.VerifyFunc", in)
	out := new(VerifyFuncResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) AddField(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.AddField", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) BlukAddField(ctx context.Context, in *BlukAddRequest, opts ...client.CallOption) (*BlukAddResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.BlukAddField", in)
	out := new(BlukAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) ModifyField(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.ModifyField", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) DeleteField(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.DeleteField", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) DeleteDatastoreFields(ctx context.Context, in *DeleteDatastoreFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.DeleteDatastoreFields", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) DeleteSelectFields(ctx context.Context, in *DeleteSelectFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.DeleteSelectFields", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) HardDeleteFields(ctx context.Context, in *HardDeleteFieldsRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.HardDeleteFields", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) RecoverSelectFields(ctx context.Context, in *RecoverSelectFieldsRequest, opts ...client.CallOption) (*RecoverSelectFieldsResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.RecoverSelectFields", in)
	out := new(RecoverSelectFieldsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fieldService) SetSequenceValue(ctx context.Context, in *SetSequenceValueRequest, opts ...client.CallOption) (*SetSequenceValueResponse, error) {
	req := c.c.NewRequest(c.name, "FieldService.SetSequenceValue", in)
	out := new(SetSequenceValueResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FieldService service

type FieldServiceHandler interface {
	FindAppFields(context.Context, *AppFieldsRequest, *AppFieldsResponse) error
	FindFields(context.Context, *FieldsRequest, *FieldsResponse) error
	FindField(context.Context, *FieldRequest, *FieldResponse) error
	VerifyFunc(context.Context, *VerifyFuncRequest, *VerifyFuncResponse) error
	AddField(context.Context, *AddRequest, *AddResponse) error
	BlukAddField(context.Context, *BlukAddRequest, *BlukAddResponse) error
	ModifyField(context.Context, *ModifyRequest, *ModifyResponse) error
	DeleteField(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteDatastoreFields(context.Context, *DeleteDatastoreFieldsRequest, *DeleteResponse) error
	DeleteSelectFields(context.Context, *DeleteSelectFieldsRequest, *DeleteResponse) error
	HardDeleteFields(context.Context, *HardDeleteFieldsRequest, *DeleteResponse) error
	RecoverSelectFields(context.Context, *RecoverSelectFieldsRequest, *RecoverSelectFieldsResponse) error
	SetSequenceValue(context.Context, *SetSequenceValueRequest, *SetSequenceValueResponse) error
}

func RegisterFieldServiceHandler(s server.Server, hdlr FieldServiceHandler, opts ...server.HandlerOption) error {
	type fieldService interface {
		FindAppFields(ctx context.Context, in *AppFieldsRequest, out *AppFieldsResponse) error
		FindFields(ctx context.Context, in *FieldsRequest, out *FieldsResponse) error
		FindField(ctx context.Context, in *FieldRequest, out *FieldResponse) error
		VerifyFunc(ctx context.Context, in *VerifyFuncRequest, out *VerifyFuncResponse) error
		AddField(ctx context.Context, in *AddRequest, out *AddResponse) error
		BlukAddField(ctx context.Context, in *BlukAddRequest, out *BlukAddResponse) error
		ModifyField(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		DeleteField(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		DeleteDatastoreFields(ctx context.Context, in *DeleteDatastoreFieldsRequest, out *DeleteResponse) error
		DeleteSelectFields(ctx context.Context, in *DeleteSelectFieldsRequest, out *DeleteResponse) error
		HardDeleteFields(ctx context.Context, in *HardDeleteFieldsRequest, out *DeleteResponse) error
		RecoverSelectFields(ctx context.Context, in *RecoverSelectFieldsRequest, out *RecoverSelectFieldsResponse) error
		SetSequenceValue(ctx context.Context, in *SetSequenceValueRequest, out *SetSequenceValueResponse) error
	}
	type FieldService struct {
		fieldService
	}
	h := &fieldServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&FieldService{h}, opts...))
}

type fieldServiceHandler struct {
	FieldServiceHandler
}

func (h *fieldServiceHandler) FindAppFields(ctx context.Context, in *AppFieldsRequest, out *AppFieldsResponse) error {
	return h.FieldServiceHandler.FindAppFields(ctx, in, out)
}

func (h *fieldServiceHandler) FindFields(ctx context.Context, in *FieldsRequest, out *FieldsResponse) error {
	return h.FieldServiceHandler.FindFields(ctx, in, out)
}

func (h *fieldServiceHandler) FindField(ctx context.Context, in *FieldRequest, out *FieldResponse) error {
	return h.FieldServiceHandler.FindField(ctx, in, out)
}

func (h *fieldServiceHandler) VerifyFunc(ctx context.Context, in *VerifyFuncRequest, out *VerifyFuncResponse) error {
	return h.FieldServiceHandler.VerifyFunc(ctx, in, out)
}

func (h *fieldServiceHandler) AddField(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.FieldServiceHandler.AddField(ctx, in, out)
}

func (h *fieldServiceHandler) BlukAddField(ctx context.Context, in *BlukAddRequest, out *BlukAddResponse) error {
	return h.FieldServiceHandler.BlukAddField(ctx, in, out)
}

func (h *fieldServiceHandler) ModifyField(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.FieldServiceHandler.ModifyField(ctx, in, out)
}

func (h *fieldServiceHandler) DeleteField(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.FieldServiceHandler.DeleteField(ctx, in, out)
}

func (h *fieldServiceHandler) DeleteDatastoreFields(ctx context.Context, in *DeleteDatastoreFieldsRequest, out *DeleteResponse) error {
	return h.FieldServiceHandler.DeleteDatastoreFields(ctx, in, out)
}

func (h *fieldServiceHandler) DeleteSelectFields(ctx context.Context, in *DeleteSelectFieldsRequest, out *DeleteResponse) error {
	return h.FieldServiceHandler.DeleteSelectFields(ctx, in, out)
}

func (h *fieldServiceHandler) HardDeleteFields(ctx context.Context, in *HardDeleteFieldsRequest, out *DeleteResponse) error {
	return h.FieldServiceHandler.HardDeleteFields(ctx, in, out)
}

func (h *fieldServiceHandler) RecoverSelectFields(ctx context.Context, in *RecoverSelectFieldsRequest, out *RecoverSelectFieldsResponse) error {
	return h.FieldServiceHandler.RecoverSelectFields(ctx, in, out)
}

func (h *fieldServiceHandler) SetSequenceValue(ctx context.Context, in *SetSequenceValueRequest, out *SetSequenceValueResponse) error {
	return h.FieldServiceHandler.SetSequenceValue(ctx, in, out)
}
