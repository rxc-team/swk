// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: datahistory.proto

package datahistory

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HistoryService service

func NewHistoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HistoryService service

type HistoryService interface {
	FindHistories(ctx context.Context, in *HistoriesRequest, opts ...client.CallOption) (*HistoriesResponse, error)
	FindLastHistories(ctx context.Context, in *LastRequest, opts ...client.CallOption) (*LastResponse, error)
	FindHistoryCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error)
	FindHistory(ctx context.Context, in *HistoryRequest, opts ...client.CallOption) (*HistoryResponse, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (HistoryService_DownloadService, error)
}

type historyService struct {
	c    client.Client
	name string
}

func NewHistoryService(name string, c client.Client) HistoryService {
	return &historyService{
		c:    c,
		name: name,
	}
}

func (c *historyService) FindHistories(ctx context.Context, in *HistoriesRequest, opts ...client.CallOption) (*HistoriesResponse, error) {
	req := c.c.NewRequest(c.name, "HistoryService.FindHistories", in)
	out := new(HistoriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyService) FindLastHistories(ctx context.Context, in *LastRequest, opts ...client.CallOption) (*LastResponse, error) {
	req := c.c.NewRequest(c.name, "HistoryService.FindLastHistories", in)
	out := new(LastResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyService) FindHistoryCount(ctx context.Context, in *CountRequest, opts ...client.CallOption) (*CountResponse, error) {
	req := c.c.NewRequest(c.name, "HistoryService.FindHistoryCount", in)
	out := new(CountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyService) FindHistory(ctx context.Context, in *HistoryRequest, opts ...client.CallOption) (*HistoryResponse, error) {
	req := c.c.NewRequest(c.name, "HistoryService.FindHistory", in)
	out := new(HistoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyService) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error) {
	req := c.c.NewRequest(c.name, "HistoryService.CreateIndex", in)
	out := new(CreateIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (HistoryService_DownloadService, error) {
	req := c.c.NewRequest(c.name, "HistoryService.Download", &DownloadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &historyServiceDownload{stream}, nil
}

type HistoryService_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResponse, error)
}

type historyServiceDownload struct {
	stream client.Stream
}

func (x *historyServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *historyServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *historyServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *historyServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *historyServiceDownload) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for HistoryService service

type HistoryServiceHandler interface {
	FindHistories(context.Context, *HistoriesRequest, *HistoriesResponse) error
	FindLastHistories(context.Context, *LastRequest, *LastResponse) error
	FindHistoryCount(context.Context, *CountRequest, *CountResponse) error
	FindHistory(context.Context, *HistoryRequest, *HistoryResponse) error
	CreateIndex(context.Context, *CreateIndexRequest, *CreateIndexResponse) error
	Download(context.Context, *DownloadRequest, HistoryService_DownloadStream) error
}

func RegisterHistoryServiceHandler(s server.Server, hdlr HistoryServiceHandler, opts ...server.HandlerOption) error {
	type historyService interface {
		FindHistories(ctx context.Context, in *HistoriesRequest, out *HistoriesResponse) error
		FindLastHistories(ctx context.Context, in *LastRequest, out *LastResponse) error
		FindHistoryCount(ctx context.Context, in *CountRequest, out *CountResponse) error
		FindHistory(ctx context.Context, in *HistoryRequest, out *HistoryResponse) error
		CreateIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error
		Download(ctx context.Context, stream server.Stream) error
	}
	type HistoryService struct {
		historyService
	}
	h := &historyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HistoryService{h}, opts...))
}

type historyServiceHandler struct {
	HistoryServiceHandler
}

func (h *historyServiceHandler) FindHistories(ctx context.Context, in *HistoriesRequest, out *HistoriesResponse) error {
	return h.HistoryServiceHandler.FindHistories(ctx, in, out)
}

func (h *historyServiceHandler) FindLastHistories(ctx context.Context, in *LastRequest, out *LastResponse) error {
	return h.HistoryServiceHandler.FindLastHistories(ctx, in, out)
}

func (h *historyServiceHandler) FindHistoryCount(ctx context.Context, in *CountRequest, out *CountResponse) error {
	return h.HistoryServiceHandler.FindHistoryCount(ctx, in, out)
}

func (h *historyServiceHandler) FindHistory(ctx context.Context, in *HistoryRequest, out *HistoryResponse) error {
	return h.HistoryServiceHandler.FindHistory(ctx, in, out)
}

func (h *historyServiceHandler) CreateIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error {
	return h.HistoryServiceHandler.CreateIndex(ctx, in, out)
}

func (h *historyServiceHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(DownloadRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.HistoryServiceHandler.Download(ctx, m, &historyServiceDownloadStream{stream})
}

type HistoryService_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type historyServiceDownloadStream struct {
	stream server.Stream
}

func (x *historyServiceDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *historyServiceDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *historyServiceDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *historyServiceDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *historyServiceDownloadStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
