// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: print.proto

package print

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PrintService service

func NewPrintServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PrintService service

type PrintService interface {
	FindPrint(ctx context.Context, in *FindPrintRequest, opts ...client.CallOption) (*FindPrintResponse, error)
	FindPrints(ctx context.Context, in *FindPrintsRequest, opts ...client.CallOption) (*FindPrintsResponse, error)
	AddPrint(ctx context.Context, in *AddPrintRequest, opts ...client.CallOption) (*AddPrintResponse, error)
	ModifyPrint(ctx context.Context, in *ModifyPrintRequest, opts ...client.CallOption) (*ModifyPrintResponse, error)
	HardDeletePrints(ctx context.Context, in *HardDeletePrintsRequest, opts ...client.CallOption) (*HardDeletePrintsResponse, error)
}

type printService struct {
	c    client.Client
	name string
}

func NewPrintService(name string, c client.Client) PrintService {
	return &printService{
		c:    c,
		name: name,
	}
}

func (c *printService) FindPrint(ctx context.Context, in *FindPrintRequest, opts ...client.CallOption) (*FindPrintResponse, error) {
	req := c.c.NewRequest(c.name, "PrintService.FindPrint", in)
	out := new(FindPrintResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printService) FindPrints(ctx context.Context, in *FindPrintsRequest, opts ...client.CallOption) (*FindPrintsResponse, error) {
	req := c.c.NewRequest(c.name, "PrintService.FindPrints", in)
	out := new(FindPrintsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printService) AddPrint(ctx context.Context, in *AddPrintRequest, opts ...client.CallOption) (*AddPrintResponse, error) {
	req := c.c.NewRequest(c.name, "PrintService.AddPrint", in)
	out := new(AddPrintResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printService) ModifyPrint(ctx context.Context, in *ModifyPrintRequest, opts ...client.CallOption) (*ModifyPrintResponse, error) {
	req := c.c.NewRequest(c.name, "PrintService.ModifyPrint", in)
	out := new(ModifyPrintResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printService) HardDeletePrints(ctx context.Context, in *HardDeletePrintsRequest, opts ...client.CallOption) (*HardDeletePrintsResponse, error) {
	req := c.c.NewRequest(c.name, "PrintService.HardDeletePrints", in)
	out := new(HardDeletePrintsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrintService service

type PrintServiceHandler interface {
	FindPrint(context.Context, *FindPrintRequest, *FindPrintResponse) error
	FindPrints(context.Context, *FindPrintsRequest, *FindPrintsResponse) error
	AddPrint(context.Context, *AddPrintRequest, *AddPrintResponse) error
	ModifyPrint(context.Context, *ModifyPrintRequest, *ModifyPrintResponse) error
	HardDeletePrints(context.Context, *HardDeletePrintsRequest, *HardDeletePrintsResponse) error
}

func RegisterPrintServiceHandler(s server.Server, hdlr PrintServiceHandler, opts ...server.HandlerOption) error {
	type printService interface {
		FindPrint(ctx context.Context, in *FindPrintRequest, out *FindPrintResponse) error
		FindPrints(ctx context.Context, in *FindPrintsRequest, out *FindPrintsResponse) error
		AddPrint(ctx context.Context, in *AddPrintRequest, out *AddPrintResponse) error
		ModifyPrint(ctx context.Context, in *ModifyPrintRequest, out *ModifyPrintResponse) error
		HardDeletePrints(ctx context.Context, in *HardDeletePrintsRequest, out *HardDeletePrintsResponse) error
	}
	type PrintService struct {
		printService
	}
	h := &printServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PrintService{h}, opts...))
}

type printServiceHandler struct {
	PrintServiceHandler
}

func (h *printServiceHandler) FindPrint(ctx context.Context, in *FindPrintRequest, out *FindPrintResponse) error {
	return h.PrintServiceHandler.FindPrint(ctx, in, out)
}

func (h *printServiceHandler) FindPrints(ctx context.Context, in *FindPrintsRequest, out *FindPrintsResponse) error {
	return h.PrintServiceHandler.FindPrints(ctx, in, out)
}

func (h *printServiceHandler) AddPrint(ctx context.Context, in *AddPrintRequest, out *AddPrintResponse) error {
	return h.PrintServiceHandler.AddPrint(ctx, in, out)
}

func (h *printServiceHandler) ModifyPrint(ctx context.Context, in *ModifyPrintRequest, out *ModifyPrintResponse) error {
	return h.PrintServiceHandler.ModifyPrint(ctx, in, out)
}

func (h *printServiceHandler) HardDeletePrints(ctx context.Context, in *HardDeletePrintsRequest, out *HardDeletePrintsResponse) error {
	return h.PrintServiceHandler.HardDeletePrints(ctx, in, out)
}
