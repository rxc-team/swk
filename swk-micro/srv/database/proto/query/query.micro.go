// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: query.proto

package query

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for QueryService service

func NewQueryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for QueryService service

type QueryService interface {
	FindQueries(ctx context.Context, in *FindQueriesRequest, opts ...client.CallOption) (*FindQueriesResponse, error)
	FindQuery(ctx context.Context, in *FindQueryRequest, opts ...client.CallOption) (*FindQueryResponse, error)
	AddQuery(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteQuery(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
	DeleteSelectQueries(ctx context.Context, in *DeleteSelectQueriesRequest, opts ...client.CallOption) (*DeleteResponse, error)
	HardDeleteQueries(ctx context.Context, in *HardDeleteQueriesRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type queryService struct {
	c    client.Client
	name string
}

func NewQueryService(name string, c client.Client) QueryService {
	return &queryService{
		c:    c,
		name: name,
	}
}

func (c *queryService) FindQueries(ctx context.Context, in *FindQueriesRequest, opts ...client.CallOption) (*FindQueriesResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.FindQueries", in)
	out := new(FindQueriesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) FindQuery(ctx context.Context, in *FindQueryRequest, opts ...client.CallOption) (*FindQueryResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.FindQuery", in)
	out := new(FindQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) AddQuery(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.AddQuery", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) DeleteQuery(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.DeleteQuery", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) DeleteSelectQueries(ctx context.Context, in *DeleteSelectQueriesRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.DeleteSelectQueries", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryService) HardDeleteQueries(ctx context.Context, in *HardDeleteQueriesRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "QueryService.HardDeleteQueries", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QueryService service

type QueryServiceHandler interface {
	FindQueries(context.Context, *FindQueriesRequest, *FindQueriesResponse) error
	FindQuery(context.Context, *FindQueryRequest, *FindQueryResponse) error
	AddQuery(context.Context, *AddRequest, *AddResponse) error
	DeleteQuery(context.Context, *DeleteRequest, *DeleteResponse) error
	DeleteSelectQueries(context.Context, *DeleteSelectQueriesRequest, *DeleteResponse) error
	HardDeleteQueries(context.Context, *HardDeleteQueriesRequest, *DeleteResponse) error
}

func RegisterQueryServiceHandler(s server.Server, hdlr QueryServiceHandler, opts ...server.HandlerOption) error {
	type queryService interface {
		FindQueries(ctx context.Context, in *FindQueriesRequest, out *FindQueriesResponse) error
		FindQuery(ctx context.Context, in *FindQueryRequest, out *FindQueryResponse) error
		AddQuery(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteQuery(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
		DeleteSelectQueries(ctx context.Context, in *DeleteSelectQueriesRequest, out *DeleteResponse) error
		HardDeleteQueries(ctx context.Context, in *HardDeleteQueriesRequest, out *DeleteResponse) error
	}
	type QueryService struct {
		queryService
	}
	h := &queryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&QueryService{h}, opts...))
}

type queryServiceHandler struct {
	QueryServiceHandler
}

func (h *queryServiceHandler) FindQueries(ctx context.Context, in *FindQueriesRequest, out *FindQueriesResponse) error {
	return h.QueryServiceHandler.FindQueries(ctx, in, out)
}

func (h *queryServiceHandler) FindQuery(ctx context.Context, in *FindQueryRequest, out *FindQueryResponse) error {
	return h.QueryServiceHandler.FindQuery(ctx, in, out)
}

func (h *queryServiceHandler) AddQuery(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.QueryServiceHandler.AddQuery(ctx, in, out)
}

func (h *queryServiceHandler) DeleteQuery(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.QueryServiceHandler.DeleteQuery(ctx, in, out)
}

func (h *queryServiceHandler) DeleteSelectQueries(ctx context.Context, in *DeleteSelectQueriesRequest, out *DeleteResponse) error {
	return h.QueryServiceHandler.DeleteSelectQueries(ctx, in, out)
}

func (h *queryServiceHandler) HardDeleteQueries(ctx context.Context, in *HardDeleteQueriesRequest, out *DeleteResponse) error {
	return h.QueryServiceHandler.HardDeleteQueries(ctx, in, out)
}
