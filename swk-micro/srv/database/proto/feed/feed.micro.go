// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: feed.proto

package feed

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ImportService service

func NewImportServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ImportService service

type ImportService interface {
	FindImports(ctx context.Context, in *ImportsRequest, opts ...client.CallOption) (*ImportsResponse, error)
	FindImportItems(ctx context.Context, in *ImportItemsRequest, opts ...client.CallOption) (*ImportItemsResponse, error)
	AddImportItem(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	DeleteImportItem(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type importService struct {
	c    client.Client
	name string
}

func NewImportService(name string, c client.Client) ImportService {
	return &importService{
		c:    c,
		name: name,
	}
}

func (c *importService) FindImports(ctx context.Context, in *ImportsRequest, opts ...client.CallOption) (*ImportsResponse, error) {
	req := c.c.NewRequest(c.name, "ImportService.FindImports", in)
	out := new(ImportsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importService) FindImportItems(ctx context.Context, in *ImportItemsRequest, opts ...client.CallOption) (*ImportItemsResponse, error) {
	req := c.c.NewRequest(c.name, "ImportService.FindImportItems", in)
	out := new(ImportItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importService) AddImportItem(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "ImportService.AddImportItem", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importService) DeleteImportItem(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "ImportService.DeleteImportItem", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImportService service

type ImportServiceHandler interface {
	FindImports(context.Context, *ImportsRequest, *ImportsResponse) error
	FindImportItems(context.Context, *ImportItemsRequest, *ImportItemsResponse) error
	AddImportItem(context.Context, *AddRequest, *AddResponse) error
	DeleteImportItem(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterImportServiceHandler(s server.Server, hdlr ImportServiceHandler, opts ...server.HandlerOption) error {
	type importService interface {
		FindImports(ctx context.Context, in *ImportsRequest, out *ImportsResponse) error
		FindImportItems(ctx context.Context, in *ImportItemsRequest, out *ImportItemsResponse) error
		AddImportItem(ctx context.Context, in *AddRequest, out *AddResponse) error
		DeleteImportItem(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type ImportService struct {
		importService
	}
	h := &importServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ImportService{h}, opts...))
}

type importServiceHandler struct {
	ImportServiceHandler
}

func (h *importServiceHandler) FindImports(ctx context.Context, in *ImportsRequest, out *ImportsResponse) error {
	return h.ImportServiceHandler.FindImports(ctx, in, out)
}

func (h *importServiceHandler) FindImportItems(ctx context.Context, in *ImportItemsRequest, out *ImportItemsResponse) error {
	return h.ImportServiceHandler.FindImportItems(ctx, in, out)
}

func (h *importServiceHandler) AddImportItem(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ImportServiceHandler.AddImportItem(ctx, in, out)
}

func (h *importServiceHandler) DeleteImportItem(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.ImportServiceHandler.DeleteImportItem(ctx, in, out)
}
