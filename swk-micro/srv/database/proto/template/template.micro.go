// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: template.proto

package template

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TemplateService service

func NewTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TemplateService service

type TemplateService interface {
	FindTemplateItems(ctx context.Context, in *ItemsRequest, opts ...client.CallOption) (*ItemsResponse, error)
	MutilAddTemplateItem(ctx context.Context, in *MutilAddRequest, opts ...client.CallOption) (*MutilAddResponse, error)
	DeleteTemplateItems(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type templateService struct {
	c    client.Client
	name string
}

func NewTemplateService(name string, c client.Client) TemplateService {
	return &templateService{
		c:    c,
		name: name,
	}
}

func (c *templateService) FindTemplateItems(ctx context.Context, in *ItemsRequest, opts ...client.CallOption) (*ItemsResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.FindTemplateItems", in)
	out := new(ItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) MutilAddTemplateItem(ctx context.Context, in *MutilAddRequest, opts ...client.CallOption) (*MutilAddResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.MutilAddTemplateItem", in)
	out := new(MutilAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateService) DeleteTemplateItems(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "TemplateService.DeleteTemplateItems", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TemplateService service

type TemplateServiceHandler interface {
	FindTemplateItems(context.Context, *ItemsRequest, *ItemsResponse) error
	MutilAddTemplateItem(context.Context, *MutilAddRequest, *MutilAddResponse) error
	DeleteTemplateItems(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterTemplateServiceHandler(s server.Server, hdlr TemplateServiceHandler, opts ...server.HandlerOption) error {
	type templateService interface {
		FindTemplateItems(ctx context.Context, in *ItemsRequest, out *ItemsResponse) error
		MutilAddTemplateItem(ctx context.Context, in *MutilAddRequest, out *MutilAddResponse) error
		DeleteTemplateItems(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type TemplateService struct {
		templateService
	}
	h := &templateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TemplateService{h}, opts...))
}

type templateServiceHandler struct {
	TemplateServiceHandler
}

func (h *templateServiceHandler) FindTemplateItems(ctx context.Context, in *ItemsRequest, out *ItemsResponse) error {
	return h.TemplateServiceHandler.FindTemplateItems(ctx, in, out)
}

func (h *templateServiceHandler) MutilAddTemplateItem(ctx context.Context, in *MutilAddRequest, out *MutilAddResponse) error {
	return h.TemplateServiceHandler.MutilAddTemplateItem(ctx, in, out)
}

func (h *templateServiceHandler) DeleteTemplateItems(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.TemplateServiceHandler.DeleteTemplateItems(ctx, in, out)
}
