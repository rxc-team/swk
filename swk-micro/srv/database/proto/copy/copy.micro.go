// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: copy.proto

package copy

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CopyService service

func NewCopyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CopyService service

type CopyService interface {
	CopyItems(ctx context.Context, in *CopyItemsRequest, opts ...client.CallOption) (*CopyItemsResponse, error)
	BulkAddItems(ctx context.Context, in *BulkAddRequest, opts ...client.CallOption) (*BulkAddResponse, error)
}

type copyService struct {
	c    client.Client
	name string
}

func NewCopyService(name string, c client.Client) CopyService {
	return &copyService{
		c:    c,
		name: name,
	}
}

func (c *copyService) CopyItems(ctx context.Context, in *CopyItemsRequest, opts ...client.CallOption) (*CopyItemsResponse, error) {
	req := c.c.NewRequest(c.name, "CopyService.CopyItems", in)
	out := new(CopyItemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *copyService) BulkAddItems(ctx context.Context, in *BulkAddRequest, opts ...client.CallOption) (*BulkAddResponse, error) {
	req := c.c.NewRequest(c.name, "CopyService.BulkAddItems", in)
	out := new(BulkAddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CopyService service

type CopyServiceHandler interface {
	CopyItems(context.Context, *CopyItemsRequest, *CopyItemsResponse) error
	BulkAddItems(context.Context, *BulkAddRequest, *BulkAddResponse) error
}

func RegisterCopyServiceHandler(s server.Server, hdlr CopyServiceHandler, opts ...server.HandlerOption) error {
	type copyService interface {
		CopyItems(ctx context.Context, in *CopyItemsRequest, out *CopyItemsResponse) error
		BulkAddItems(ctx context.Context, in *BulkAddRequest, out *BulkAddResponse) error
	}
	type CopyService struct {
		copyService
	}
	h := &copyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CopyService{h}, opts...))
}

type copyServiceHandler struct {
	CopyServiceHandler
}

func (h *copyServiceHandler) CopyItems(ctx context.Context, in *CopyItemsRequest, out *CopyItemsResponse) error {
	return h.CopyServiceHandler.CopyItems(ctx, in, out)
}

func (h *copyServiceHandler) BulkAddItems(ctx context.Context, in *BulkAddRequest, out *BulkAddResponse) error {
	return h.CopyServiceHandler.BulkAddItems(ctx, in, out)
}
