// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: permission.proto

package permission

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PermissionService service

func NewPermissionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PermissionService service

type PermissionService interface {
	FindActions(ctx context.Context, in *FindActionsRequest, opts ...client.CallOption) (*FindActionsResponse, error)
	FindPermissions(ctx context.Context, in *FindPermissionsRequest, opts ...client.CallOption) (*FindPermissionsResponse, error)
}

type permissionService struct {
	c    client.Client
	name string
}

func NewPermissionService(name string, c client.Client) PermissionService {
	return &permissionService{
		c:    c,
		name: name,
	}
}

func (c *permissionService) FindActions(ctx context.Context, in *FindActionsRequest, opts ...client.CallOption) (*FindActionsResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.FindActions", in)
	out := new(FindActionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) FindPermissions(ctx context.Context, in *FindPermissionsRequest, opts ...client.CallOption) (*FindPermissionsResponse, error) {
	req := c.c.NewRequest(c.name, "PermissionService.FindPermissions", in)
	out := new(FindPermissionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PermissionService service

type PermissionServiceHandler interface {
	FindActions(context.Context, *FindActionsRequest, *FindActionsResponse) error
	FindPermissions(context.Context, *FindPermissionsRequest, *FindPermissionsResponse) error
}

func RegisterPermissionServiceHandler(s server.Server, hdlr PermissionServiceHandler, opts ...server.HandlerOption) error {
	type permissionService interface {
		FindActions(ctx context.Context, in *FindActionsRequest, out *FindActionsResponse) error
		FindPermissions(ctx context.Context, in *FindPermissionsRequest, out *FindPermissionsResponse) error
	}
	type PermissionService struct {
		permissionService
	}
	h := &permissionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PermissionService{h}, opts...))
}

type permissionServiceHandler struct {
	PermissionServiceHandler
}

func (h *permissionServiceHandler) FindActions(ctx context.Context, in *FindActionsRequest, out *FindActionsResponse) error {
	return h.PermissionServiceHandler.FindActions(ctx, in, out)
}

func (h *permissionServiceHandler) FindPermissions(ctx context.Context, in *FindPermissionsRequest, out *FindPermissionsResponse) error {
	return h.PermissionServiceHandler.FindPermissions(ctx, in, out)
}
