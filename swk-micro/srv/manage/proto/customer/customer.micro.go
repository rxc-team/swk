// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: customer.proto

package customer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CustomerService service

func NewCustomerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CustomerService service

type CustomerService interface {
	FindCustomers(ctx context.Context, in *FindCustomersRequest, opts ...client.CallOption) (*FindCustomersResponse, error)
	FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...client.CallOption) (*FindCustomerResponse, error)
	FindCustomerByDomain(ctx context.Context, in *FindCustomerByDomainRequest, opts ...client.CallOption) (*FindCustomerByDomainResponse, error)
	AddCustomer(ctx context.Context, in *AddCustomerRequest, opts ...client.CallOption) (*AddCustomerResponse, error)
	ModifyCustomer(ctx context.Context, in *ModifyCustomerRequest, opts ...client.CallOption) (*ModifyCustomerResponse, error)
	ModifyUsedSize(ctx context.Context, in *ModifyUsedSizeRequest, opts ...client.CallOption) (*ModifyUsedSizeResponse, error)
	ModifyUsedUsers(ctx context.Context, in *ModifyUsedUsersRequest, opts ...client.CallOption) (*ModifyUsedUsersResponse, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error)
	DeleteSelectCustomers(ctx context.Context, in *DeleteSelectCustomersRequest, opts ...client.CallOption) (*DeleteSelectCustomersResponse, error)
	HardDeleteCustomers(ctx context.Context, in *HardDeleteCustomersRequest, opts ...client.CallOption) (*HardDeleteCustomersResponse, error)
	RecoverSelectCustomers(ctx context.Context, in *RecoverSelectCustomersRequest, opts ...client.CallOption) (*RecoverSelectCustomersResponse, error)
}

type customerService struct {
	c    client.Client
	name string
}

func NewCustomerService(name string, c client.Client) CustomerService {
	return &customerService{
		c:    c,
		name: name,
	}
}

func (c *customerService) FindCustomers(ctx context.Context, in *FindCustomersRequest, opts ...client.CallOption) (*FindCustomersResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.FindCustomers", in)
	out := new(FindCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...client.CallOption) (*FindCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.FindCustomer", in)
	out := new(FindCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) FindCustomerByDomain(ctx context.Context, in *FindCustomerByDomainRequest, opts ...client.CallOption) (*FindCustomerByDomainResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.FindCustomerByDomain", in)
	out := new(FindCustomerByDomainResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) AddCustomer(ctx context.Context, in *AddCustomerRequest, opts ...client.CallOption) (*AddCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.AddCustomer", in)
	out := new(AddCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) ModifyCustomer(ctx context.Context, in *ModifyCustomerRequest, opts ...client.CallOption) (*ModifyCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.ModifyCustomer", in)
	out := new(ModifyCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) ModifyUsedSize(ctx context.Context, in *ModifyUsedSizeRequest, opts ...client.CallOption) (*ModifyUsedSizeResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.ModifyUsedSize", in)
	out := new(ModifyUsedSizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) ModifyUsedUsers(ctx context.Context, in *ModifyUsedUsersRequest, opts ...client.CallOption) (*ModifyUsedUsersResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.ModifyUsedUsers", in)
	out := new(ModifyUsedUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...client.CallOption) (*DeleteCustomerResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.DeleteCustomer", in)
	out := new(DeleteCustomerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) DeleteSelectCustomers(ctx context.Context, in *DeleteSelectCustomersRequest, opts ...client.CallOption) (*DeleteSelectCustomersResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.DeleteSelectCustomers", in)
	out := new(DeleteSelectCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) HardDeleteCustomers(ctx context.Context, in *HardDeleteCustomersRequest, opts ...client.CallOption) (*HardDeleteCustomersResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.HardDeleteCustomers", in)
	out := new(HardDeleteCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerService) RecoverSelectCustomers(ctx context.Context, in *RecoverSelectCustomersRequest, opts ...client.CallOption) (*RecoverSelectCustomersResponse, error) {
	req := c.c.NewRequest(c.name, "CustomerService.RecoverSelectCustomers", in)
	out := new(RecoverSelectCustomersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CustomerService service

type CustomerServiceHandler interface {
	FindCustomers(context.Context, *FindCustomersRequest, *FindCustomersResponse) error
	FindCustomer(context.Context, *FindCustomerRequest, *FindCustomerResponse) error
	FindCustomerByDomain(context.Context, *FindCustomerByDomainRequest, *FindCustomerByDomainResponse) error
	AddCustomer(context.Context, *AddCustomerRequest, *AddCustomerResponse) error
	ModifyCustomer(context.Context, *ModifyCustomerRequest, *ModifyCustomerResponse) error
	ModifyUsedSize(context.Context, *ModifyUsedSizeRequest, *ModifyUsedSizeResponse) error
	ModifyUsedUsers(context.Context, *ModifyUsedUsersRequest, *ModifyUsedUsersResponse) error
	DeleteCustomer(context.Context, *DeleteCustomerRequest, *DeleteCustomerResponse) error
	DeleteSelectCustomers(context.Context, *DeleteSelectCustomersRequest, *DeleteSelectCustomersResponse) error
	HardDeleteCustomers(context.Context, *HardDeleteCustomersRequest, *HardDeleteCustomersResponse) error
	RecoverSelectCustomers(context.Context, *RecoverSelectCustomersRequest, *RecoverSelectCustomersResponse) error
}

func RegisterCustomerServiceHandler(s server.Server, hdlr CustomerServiceHandler, opts ...server.HandlerOption) error {
	type customerService interface {
		FindCustomers(ctx context.Context, in *FindCustomersRequest, out *FindCustomersResponse) error
		FindCustomer(ctx context.Context, in *FindCustomerRequest, out *FindCustomerResponse) error
		FindCustomerByDomain(ctx context.Context, in *FindCustomerByDomainRequest, out *FindCustomerByDomainResponse) error
		AddCustomer(ctx context.Context, in *AddCustomerRequest, out *AddCustomerResponse) error
		ModifyCustomer(ctx context.Context, in *ModifyCustomerRequest, out *ModifyCustomerResponse) error
		ModifyUsedSize(ctx context.Context, in *ModifyUsedSizeRequest, out *ModifyUsedSizeResponse) error
		ModifyUsedUsers(ctx context.Context, in *ModifyUsedUsersRequest, out *ModifyUsedUsersResponse) error
		DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error
		DeleteSelectCustomers(ctx context.Context, in *DeleteSelectCustomersRequest, out *DeleteSelectCustomersResponse) error
		HardDeleteCustomers(ctx context.Context, in *HardDeleteCustomersRequest, out *HardDeleteCustomersResponse) error
		RecoverSelectCustomers(ctx context.Context, in *RecoverSelectCustomersRequest, out *RecoverSelectCustomersResponse) error
	}
	type CustomerService struct {
		customerService
	}
	h := &customerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CustomerService{h}, opts...))
}

type customerServiceHandler struct {
	CustomerServiceHandler
}

func (h *customerServiceHandler) FindCustomers(ctx context.Context, in *FindCustomersRequest, out *FindCustomersResponse) error {
	return h.CustomerServiceHandler.FindCustomers(ctx, in, out)
}

func (h *customerServiceHandler) FindCustomer(ctx context.Context, in *FindCustomerRequest, out *FindCustomerResponse) error {
	return h.CustomerServiceHandler.FindCustomer(ctx, in, out)
}

func (h *customerServiceHandler) FindCustomerByDomain(ctx context.Context, in *FindCustomerByDomainRequest, out *FindCustomerByDomainResponse) error {
	return h.CustomerServiceHandler.FindCustomerByDomain(ctx, in, out)
}

func (h *customerServiceHandler) AddCustomer(ctx context.Context, in *AddCustomerRequest, out *AddCustomerResponse) error {
	return h.CustomerServiceHandler.AddCustomer(ctx, in, out)
}

func (h *customerServiceHandler) ModifyCustomer(ctx context.Context, in *ModifyCustomerRequest, out *ModifyCustomerResponse) error {
	return h.CustomerServiceHandler.ModifyCustomer(ctx, in, out)
}

func (h *customerServiceHandler) ModifyUsedSize(ctx context.Context, in *ModifyUsedSizeRequest, out *ModifyUsedSizeResponse) error {
	return h.CustomerServiceHandler.ModifyUsedSize(ctx, in, out)
}

func (h *customerServiceHandler) ModifyUsedUsers(ctx context.Context, in *ModifyUsedUsersRequest, out *ModifyUsedUsersResponse) error {
	return h.CustomerServiceHandler.ModifyUsedUsers(ctx, in, out)
}

func (h *customerServiceHandler) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, out *DeleteCustomerResponse) error {
	return h.CustomerServiceHandler.DeleteCustomer(ctx, in, out)
}

func (h *customerServiceHandler) DeleteSelectCustomers(ctx context.Context, in *DeleteSelectCustomersRequest, out *DeleteSelectCustomersResponse) error {
	return h.CustomerServiceHandler.DeleteSelectCustomers(ctx, in, out)
}

func (h *customerServiceHandler) HardDeleteCustomers(ctx context.Context, in *HardDeleteCustomersRequest, out *HardDeleteCustomersResponse) error {
	return h.CustomerServiceHandler.HardDeleteCustomers(ctx, in, out)
}

func (h *customerServiceHandler) RecoverSelectCustomers(ctx context.Context, in *RecoverSelectCustomersRequest, out *RecoverSelectCustomersResponse) error {
	return h.CustomerServiceHandler.RecoverSelectCustomers(ctx, in, out)
}
