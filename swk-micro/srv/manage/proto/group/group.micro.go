// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: group.proto

package group

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GroupService service

func NewGroupServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GroupService service

type GroupService interface {
	FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...client.CallOption) (*FindGroupsResponse, error)
	FindGroup(ctx context.Context, in *FindGroupRequest, opts ...client.CallOption) (*FindGroupResponse, error)
	FindGroupAccess(ctx context.Context, in *FindGroupAccessRequest, opts ...client.CallOption) (*FindGroupAccessResponse, error)
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...client.CallOption) (*AddGroupResponse, error)
	ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...client.CallOption) (*ModifyGroupResponse, error)
	HardDeleteGroups(ctx context.Context, in *HardDeleteGroupsRequest, opts ...client.CallOption) (*HardDeleteGroupsResponse, error)
}

type groupService struct {
	c    client.Client
	name string
}

func NewGroupService(name string, c client.Client) GroupService {
	return &groupService{
		c:    c,
		name: name,
	}
}

func (c *groupService) FindGroups(ctx context.Context, in *FindGroupsRequest, opts ...client.CallOption) (*FindGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.FindGroups", in)
	out := new(FindGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) FindGroup(ctx context.Context, in *FindGroupRequest, opts ...client.CallOption) (*FindGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.FindGroup", in)
	out := new(FindGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) FindGroupAccess(ctx context.Context, in *FindGroupAccessRequest, opts ...client.CallOption) (*FindGroupAccessResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.FindGroupAccess", in)
	out := new(FindGroupAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...client.CallOption) (*AddGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.AddGroup", in)
	out := new(AddGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) ModifyGroup(ctx context.Context, in *ModifyGroupRequest, opts ...client.CallOption) (*ModifyGroupResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.ModifyGroup", in)
	out := new(ModifyGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupService) HardDeleteGroups(ctx context.Context, in *HardDeleteGroupsRequest, opts ...client.CallOption) (*HardDeleteGroupsResponse, error) {
	req := c.c.NewRequest(c.name, "GroupService.HardDeleteGroups", in)
	out := new(HardDeleteGroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GroupService service

type GroupServiceHandler interface {
	FindGroups(context.Context, *FindGroupsRequest, *FindGroupsResponse) error
	FindGroup(context.Context, *FindGroupRequest, *FindGroupResponse) error
	FindGroupAccess(context.Context, *FindGroupAccessRequest, *FindGroupAccessResponse) error
	AddGroup(context.Context, *AddGroupRequest, *AddGroupResponse) error
	ModifyGroup(context.Context, *ModifyGroupRequest, *ModifyGroupResponse) error
	HardDeleteGroups(context.Context, *HardDeleteGroupsRequest, *HardDeleteGroupsResponse) error
}

func RegisterGroupServiceHandler(s server.Server, hdlr GroupServiceHandler, opts ...server.HandlerOption) error {
	type groupService interface {
		FindGroups(ctx context.Context, in *FindGroupsRequest, out *FindGroupsResponse) error
		FindGroup(ctx context.Context, in *FindGroupRequest, out *FindGroupResponse) error
		FindGroupAccess(ctx context.Context, in *FindGroupAccessRequest, out *FindGroupAccessResponse) error
		AddGroup(ctx context.Context, in *AddGroupRequest, out *AddGroupResponse) error
		ModifyGroup(ctx context.Context, in *ModifyGroupRequest, out *ModifyGroupResponse) error
		HardDeleteGroups(ctx context.Context, in *HardDeleteGroupsRequest, out *HardDeleteGroupsResponse) error
	}
	type GroupService struct {
		groupService
	}
	h := &groupServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GroupService{h}, opts...))
}

type groupServiceHandler struct {
	GroupServiceHandler
}

func (h *groupServiceHandler) FindGroups(ctx context.Context, in *FindGroupsRequest, out *FindGroupsResponse) error {
	return h.GroupServiceHandler.FindGroups(ctx, in, out)
}

func (h *groupServiceHandler) FindGroup(ctx context.Context, in *FindGroupRequest, out *FindGroupResponse) error {
	return h.GroupServiceHandler.FindGroup(ctx, in, out)
}

func (h *groupServiceHandler) FindGroupAccess(ctx context.Context, in *FindGroupAccessRequest, out *FindGroupAccessResponse) error {
	return h.GroupServiceHandler.FindGroupAccess(ctx, in, out)
}

func (h *groupServiceHandler) AddGroup(ctx context.Context, in *AddGroupRequest, out *AddGroupResponse) error {
	return h.GroupServiceHandler.AddGroup(ctx, in, out)
}

func (h *groupServiceHandler) ModifyGroup(ctx context.Context, in *ModifyGroupRequest, out *ModifyGroupResponse) error {
	return h.GroupServiceHandler.ModifyGroup(ctx, in, out)
}

func (h *groupServiceHandler) HardDeleteGroups(ctx context.Context, in *HardDeleteGroupsRequest, out *HardDeleteGroupsResponse) error {
	return h.GroupServiceHandler.HardDeleteGroups(ctx, in, out)
}
