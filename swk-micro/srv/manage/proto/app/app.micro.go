// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app.proto

package app

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppService service

func NewAppServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppService service

type AppService interface {
	FindAppsByIds(ctx context.Context, in *FindAppsByIdsRequest, opts ...client.CallOption) (*FindAppsByIdsResponse, error)
	FindApps(ctx context.Context, in *FindAppsRequest, opts ...client.CallOption) (*FindAppsResponse, error)
	FindApp(ctx context.Context, in *FindAppRequest, opts ...client.CallOption) (*FindAppResponse, error)
	AddApp(ctx context.Context, in *AddAppRequest, opts ...client.CallOption) (*AddAppResponse, error)
	ModifyApp(ctx context.Context, in *ModifyAppRequest, opts ...client.CallOption) (*ModifyAppResponse, error)
	ModifyAppSort(ctx context.Context, in *ModifyAppSortRequest, opts ...client.CallOption) (*ModifyAppSortResponse, error)
	ModifyAppConfigs(ctx context.Context, in *ModifyConfigsRequest, opts ...client.CallOption) (*ModifyConfigsResponse, error)
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...client.CallOption) (*DeleteAppResponse, error)
	DeleteSelectApps(ctx context.Context, in *DeleteSelectAppsRequest, opts ...client.CallOption) (*DeleteSelectAppsResponse, error)
	HardDeleteApps(ctx context.Context, in *HardDeleteAppsRequest, opts ...client.CallOption) (*HardDeleteAppsResponse, error)
	RecoverSelectApps(ctx context.Context, in *RecoverSelectAppsRequest, opts ...client.CallOption) (*RecoverSelectAppsResponse, error)
	NextMonth(ctx context.Context, in *NextMonthRequest, opts ...client.CallOption) (*NextMonthResponse, error)
}

type appService struct {
	c    client.Client
	name string
}

func NewAppService(name string, c client.Client) AppService {
	return &appService{
		c:    c,
		name: name,
	}
}

func (c *appService) FindAppsByIds(ctx context.Context, in *FindAppsByIdsRequest, opts ...client.CallOption) (*FindAppsByIdsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.FindAppsByIds", in)
	out := new(FindAppsByIdsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) FindApps(ctx context.Context, in *FindAppsRequest, opts ...client.CallOption) (*FindAppsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.FindApps", in)
	out := new(FindAppsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) FindApp(ctx context.Context, in *FindAppRequest, opts ...client.CallOption) (*FindAppResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.FindApp", in)
	out := new(FindAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) AddApp(ctx context.Context, in *AddAppRequest, opts ...client.CallOption) (*AddAppResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.AddApp", in)
	out := new(AddAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) ModifyApp(ctx context.Context, in *ModifyAppRequest, opts ...client.CallOption) (*ModifyAppResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.ModifyApp", in)
	out := new(ModifyAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) ModifyAppSort(ctx context.Context, in *ModifyAppSortRequest, opts ...client.CallOption) (*ModifyAppSortResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.ModifyAppSort", in)
	out := new(ModifyAppSortResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) ModifyAppConfigs(ctx context.Context, in *ModifyConfigsRequest, opts ...client.CallOption) (*ModifyConfigsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.ModifyAppConfigs", in)
	out := new(ModifyConfigsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...client.CallOption) (*DeleteAppResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.DeleteApp", in)
	out := new(DeleteAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) DeleteSelectApps(ctx context.Context, in *DeleteSelectAppsRequest, opts ...client.CallOption) (*DeleteSelectAppsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.DeleteSelectApps", in)
	out := new(DeleteSelectAppsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) HardDeleteApps(ctx context.Context, in *HardDeleteAppsRequest, opts ...client.CallOption) (*HardDeleteAppsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.HardDeleteApps", in)
	out := new(HardDeleteAppsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) RecoverSelectApps(ctx context.Context, in *RecoverSelectAppsRequest, opts ...client.CallOption) (*RecoverSelectAppsResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.RecoverSelectApps", in)
	out := new(RecoverSelectAppsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) NextMonth(ctx context.Context, in *NextMonthRequest, opts ...client.CallOption) (*NextMonthResponse, error) {
	req := c.c.NewRequest(c.name, "AppService.NextMonth", in)
	out := new(NextMonthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppService service

type AppServiceHandler interface {
	FindAppsByIds(context.Context, *FindAppsByIdsRequest, *FindAppsByIdsResponse) error
	FindApps(context.Context, *FindAppsRequest, *FindAppsResponse) error
	FindApp(context.Context, *FindAppRequest, *FindAppResponse) error
	AddApp(context.Context, *AddAppRequest, *AddAppResponse) error
	ModifyApp(context.Context, *ModifyAppRequest, *ModifyAppResponse) error
	ModifyAppSort(context.Context, *ModifyAppSortRequest, *ModifyAppSortResponse) error
	ModifyAppConfigs(context.Context, *ModifyConfigsRequest, *ModifyConfigsResponse) error
	DeleteApp(context.Context, *DeleteAppRequest, *DeleteAppResponse) error
	DeleteSelectApps(context.Context, *DeleteSelectAppsRequest, *DeleteSelectAppsResponse) error
	HardDeleteApps(context.Context, *HardDeleteAppsRequest, *HardDeleteAppsResponse) error
	RecoverSelectApps(context.Context, *RecoverSelectAppsRequest, *RecoverSelectAppsResponse) error
	NextMonth(context.Context, *NextMonthRequest, *NextMonthResponse) error
}

func RegisterAppServiceHandler(s server.Server, hdlr AppServiceHandler, opts ...server.HandlerOption) error {
	type appService interface {
		FindAppsByIds(ctx context.Context, in *FindAppsByIdsRequest, out *FindAppsByIdsResponse) error
		FindApps(ctx context.Context, in *FindAppsRequest, out *FindAppsResponse) error
		FindApp(ctx context.Context, in *FindAppRequest, out *FindAppResponse) error
		AddApp(ctx context.Context, in *AddAppRequest, out *AddAppResponse) error
		ModifyApp(ctx context.Context, in *ModifyAppRequest, out *ModifyAppResponse) error
		ModifyAppSort(ctx context.Context, in *ModifyAppSortRequest, out *ModifyAppSortResponse) error
		ModifyAppConfigs(ctx context.Context, in *ModifyConfigsRequest, out *ModifyConfigsResponse) error
		DeleteApp(ctx context.Context, in *DeleteAppRequest, out *DeleteAppResponse) error
		DeleteSelectApps(ctx context.Context, in *DeleteSelectAppsRequest, out *DeleteSelectAppsResponse) error
		HardDeleteApps(ctx context.Context, in *HardDeleteAppsRequest, out *HardDeleteAppsResponse) error
		RecoverSelectApps(ctx context.Context, in *RecoverSelectAppsRequest, out *RecoverSelectAppsResponse) error
		NextMonth(ctx context.Context, in *NextMonthRequest, out *NextMonthResponse) error
	}
	type AppService struct {
		appService
	}
	h := &appServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppService{h}, opts...))
}

type appServiceHandler struct {
	AppServiceHandler
}

func (h *appServiceHandler) FindAppsByIds(ctx context.Context, in *FindAppsByIdsRequest, out *FindAppsByIdsResponse) error {
	return h.AppServiceHandler.FindAppsByIds(ctx, in, out)
}

func (h *appServiceHandler) FindApps(ctx context.Context, in *FindAppsRequest, out *FindAppsResponse) error {
	return h.AppServiceHandler.FindApps(ctx, in, out)
}

func (h *appServiceHandler) FindApp(ctx context.Context, in *FindAppRequest, out *FindAppResponse) error {
	return h.AppServiceHandler.FindApp(ctx, in, out)
}

func (h *appServiceHandler) AddApp(ctx context.Context, in *AddAppRequest, out *AddAppResponse) error {
	return h.AppServiceHandler.AddApp(ctx, in, out)
}

func (h *appServiceHandler) ModifyApp(ctx context.Context, in *ModifyAppRequest, out *ModifyAppResponse) error {
	return h.AppServiceHandler.ModifyApp(ctx, in, out)
}

func (h *appServiceHandler) ModifyAppSort(ctx context.Context, in *ModifyAppSortRequest, out *ModifyAppSortResponse) error {
	return h.AppServiceHandler.ModifyAppSort(ctx, in, out)
}

func (h *appServiceHandler) ModifyAppConfigs(ctx context.Context, in *ModifyConfigsRequest, out *ModifyConfigsResponse) error {
	return h.AppServiceHandler.ModifyAppConfigs(ctx, in, out)
}

func (h *appServiceHandler) DeleteApp(ctx context.Context, in *DeleteAppRequest, out *DeleteAppResponse) error {
	return h.AppServiceHandler.DeleteApp(ctx, in, out)
}

func (h *appServiceHandler) DeleteSelectApps(ctx context.Context, in *DeleteSelectAppsRequest, out *DeleteSelectAppsResponse) error {
	return h.AppServiceHandler.DeleteSelectApps(ctx, in, out)
}

func (h *appServiceHandler) HardDeleteApps(ctx context.Context, in *HardDeleteAppsRequest, out *HardDeleteAppsResponse) error {
	return h.AppServiceHandler.HardDeleteApps(ctx, in, out)
}

func (h *appServiceHandler) RecoverSelectApps(ctx context.Context, in *RecoverSelectAppsRequest, out *RecoverSelectAppsResponse) error {
	return h.AppServiceHandler.RecoverSelectApps(ctx, in, out)
}

func (h *appServiceHandler) NextMonth(ctx context.Context, in *NextMonthRequest, out *NextMonthResponse) error {
	return h.AppServiceHandler.NextMonth(ctx, in, out)
}
