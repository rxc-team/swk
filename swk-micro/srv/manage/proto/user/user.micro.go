// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	FindUserByEmail(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*EmailResponse, error)
	FindRelatedUsers(ctx context.Context, in *FindRelatedUsersRequest, opts ...client.CallOption) (*FindRelatedUsersResponse, error)
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error)
	FindUser(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*FindUserResponse, error)
	FindDefaultUser(ctx context.Context, in *FindDefaultUserRequest, opts ...client.CallOption) (*FindDefaultUserResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*AddUserResponse, error)
	ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...client.CallOption) (*ModifyUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	DeleteSelectUsers(ctx context.Context, in *DeleteSelectUsersRequest, opts ...client.CallOption) (*DeleteSelectUsersResponse, error)
	RecoverSelectUsers(ctx context.Context, in *RecoverSelectUsersRequest, opts ...client.CallOption) (*RecoverSelectUsersResponse, error)
	UnlockSelectUsers(ctx context.Context, in *UnlockSelectUsersRequest, opts ...client.CallOption) (*UnlockSelectUsersResponse, error)
	AddUserCollectionIndex(ctx context.Context, in *AddUserIndexRequest, opts ...client.CallOption) (*AddUserIndexResponse, error)
	Upload(ctx context.Context, opts ...client.CallOption) (UserService_UploadService, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (UserService_DownloadService, error)
	ModifyUserMailStatus(ctx context.Context, in *ModifyUserMailStatusRequest, opts ...client.CallOption) (*ModifyUserMailStatusResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserByEmail(ctx context.Context, in *EmailRequest, opts ...client.CallOption) (*EmailResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindUserByEmail", in)
	out := new(EmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindRelatedUsers(ctx context.Context, in *FindRelatedUsersRequest, opts ...client.CallOption) (*FindRelatedUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindRelatedUsers", in)
	out := new(FindRelatedUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindUsers", in)
	out := new(FindUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUser(ctx context.Context, in *FindUserRequest, opts ...client.CallOption) (*FindUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindUser", in)
	out := new(FindUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindDefaultUser(ctx context.Context, in *FindDefaultUserRequest, opts ...client.CallOption) (*FindDefaultUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindDefaultUser", in)
	out := new(FindDefaultUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddUser(ctx context.Context, in *AddUserRequest, opts ...client.CallOption) (*AddUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AddUser", in)
	out := new(AddUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ModifyUser(ctx context.Context, in *ModifyUserRequest, opts ...client.CallOption) (*ModifyUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ModifyUser", in)
	out := new(ModifyUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteSelectUsers(ctx context.Context, in *DeleteSelectUsersRequest, opts ...client.CallOption) (*DeleteSelectUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.DeleteSelectUsers", in)
	out := new(DeleteSelectUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RecoverSelectUsers(ctx context.Context, in *RecoverSelectUsersRequest, opts ...client.CallOption) (*RecoverSelectUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.RecoverSelectUsers", in)
	out := new(RecoverSelectUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ModifyUserMailStatus(ctx context.Context, in *ModifyUserMailStatusRequest, opts ...client.CallOption) (*ModifyUserMailStatusResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.ModifyUserMailStatus", in)
	out := new(ModifyUserMailStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UnlockSelectUsers(ctx context.Context, in *UnlockSelectUsersRequest, opts ...client.CallOption) (*UnlockSelectUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UnlockSelectUsers", in)
	out := new(UnlockSelectUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddUserCollectionIndex(ctx context.Context, in *AddUserIndexRequest, opts ...client.CallOption) (*AddUserIndexResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.AddUserCollectionIndex", in)
	out := new(AddUserIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Upload(ctx context.Context, opts ...client.CallOption) (UserService_UploadService, error) {
	req := c.c.NewRequest(c.name, "UserService.Upload", &UploadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &userServiceUpload{stream}, nil
}

type UserService_UploadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadRequest) error
	Recv() (*UploadResponse, error)
}

type userServiceUpload struct {
	stream client.Stream
}

func (x *userServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *userServiceUpload) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceUpload) Send(m *UploadRequest) error {
	return x.stream.Send(m)
}

func (x *userServiceUpload) Recv() (*UploadResponse, error) {
	m := new(UploadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (UserService_DownloadService, error) {
	req := c.c.NewRequest(c.name, "UserService.Download", &DownloadRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &userServiceDownload{stream}, nil
}

type UserService_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResponse, error)
}

type userServiceDownload struct {
	stream client.Stream
}

func (x *userServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *userServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceDownload) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Login(context.Context, *LoginRequest, *LoginResponse) error
	FindUserByEmail(context.Context, *EmailRequest, *EmailResponse) error
	FindRelatedUsers(context.Context, *FindRelatedUsersRequest, *FindRelatedUsersResponse) error
	FindUsers(context.Context, *FindUsersRequest, *FindUsersResponse) error
	FindUser(context.Context, *FindUserRequest, *FindUserResponse) error
	FindDefaultUser(context.Context, *FindDefaultUserRequest, *FindDefaultUserResponse) error
	AddUser(context.Context, *AddUserRequest, *AddUserResponse) error
	ModifyUser(context.Context, *ModifyUserRequest, *ModifyUserResponse) error
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	DeleteSelectUsers(context.Context, *DeleteSelectUsersRequest, *DeleteSelectUsersResponse) error
	RecoverSelectUsers(context.Context, *RecoverSelectUsersRequest, *RecoverSelectUsersResponse) error
	UnlockSelectUsers(context.Context, *UnlockSelectUsersRequest, *UnlockSelectUsersResponse) error
	AddUserCollectionIndex(context.Context, *AddUserIndexRequest, *AddUserIndexResponse) error
	Upload(context.Context, UserService_UploadStream) error
	Download(context.Context, *DownloadRequest, UserService_DownloadStream) error
	ModifyUserMailStatus(context.Context, *ModifyUserMailStatusRequest, *ModifyUserMailStatusResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		FindUserByEmail(ctx context.Context, in *EmailRequest, out *EmailResponse) error
		FindRelatedUsers(ctx context.Context, in *FindRelatedUsersRequest, out *FindRelatedUsersResponse) error
		FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error
		FindUser(ctx context.Context, in *FindUserRequest, out *FindUserResponse) error
		FindDefaultUser(ctx context.Context, in *FindDefaultUserRequest, out *FindDefaultUserResponse) error
		AddUser(ctx context.Context, in *AddUserRequest, out *AddUserResponse) error
		ModifyUser(ctx context.Context, in *ModifyUserRequest, out *ModifyUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		DeleteSelectUsers(ctx context.Context, in *DeleteSelectUsersRequest, out *DeleteSelectUsersResponse) error
		RecoverSelectUsers(ctx context.Context, in *RecoverSelectUsersRequest, out *RecoverSelectUsersResponse) error
		UnlockSelectUsers(ctx context.Context, in *UnlockSelectUsersRequest, out *UnlockSelectUsersResponse) error
		AddUserCollectionIndex(ctx context.Context, in *AddUserIndexRequest, out *AddUserIndexResponse) error
		Upload(ctx context.Context, stream server.Stream) error
		Download(ctx context.Context, stream server.Stream) error
		ModifyUserMailStatus(ctx context.Context, in *ModifyUserMailStatusRequest, out *ModifyUserMailStatusResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) FindUserByEmail(ctx context.Context, in *EmailRequest, out *EmailResponse) error {
	return h.UserServiceHandler.FindUserByEmail(ctx, in, out)
}

func (h *userServiceHandler) FindRelatedUsers(ctx context.Context, in *FindRelatedUsersRequest, out *FindRelatedUsersResponse) error {
	return h.UserServiceHandler.FindRelatedUsers(ctx, in, out)
}

func (h *userServiceHandler) FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error {
	return h.UserServiceHandler.FindUsers(ctx, in, out)
}

func (h *userServiceHandler) FindUser(ctx context.Context, in *FindUserRequest, out *FindUserResponse) error {
	return h.UserServiceHandler.FindUser(ctx, in, out)
}

func (h *userServiceHandler) FindDefaultUser(ctx context.Context, in *FindDefaultUserRequest, out *FindDefaultUserResponse) error {
	return h.UserServiceHandler.FindDefaultUser(ctx, in, out)
}

func (h *userServiceHandler) AddUser(ctx context.Context, in *AddUserRequest, out *AddUserResponse) error {
	return h.UserServiceHandler.AddUser(ctx, in, out)
}

func (h *userServiceHandler) ModifyUser(ctx context.Context, in *ModifyUserRequest, out *ModifyUserResponse) error {
	return h.UserServiceHandler.ModifyUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserServiceHandler.DeleteUser(ctx, in, out)
}

func (h *userServiceHandler) DeleteSelectUsers(ctx context.Context, in *DeleteSelectUsersRequest, out *DeleteSelectUsersResponse) error {
	return h.UserServiceHandler.DeleteSelectUsers(ctx, in, out)
}

func (h *userServiceHandler) RecoverSelectUsers(ctx context.Context, in *RecoverSelectUsersRequest, out *RecoverSelectUsersResponse) error {
	return h.UserServiceHandler.RecoverSelectUsers(ctx, in, out)
}

func (h *userServiceHandler) ModifyUserMailStatus(ctx context.Context, in *ModifyUserMailStatusRequest, out *ModifyUserMailStatusResponse) error {
	return h.UserServiceHandler.ModifyUserMailStatus(ctx, in, out)
}

func (h *userServiceHandler) UnlockSelectUsers(ctx context.Context, in *UnlockSelectUsersRequest, out *UnlockSelectUsersResponse) error {
	return h.UserServiceHandler.UnlockSelectUsers(ctx, in, out)
}

func (h *userServiceHandler) AddUserCollectionIndex(ctx context.Context, in *AddUserIndexRequest, out *AddUserIndexResponse) error {
	return h.UserServiceHandler.AddUserCollectionIndex(ctx, in, out)
}

func (h *userServiceHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.UserServiceHandler.Upload(ctx, &userServiceUploadStream{stream})
}

type UserService_UploadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadResponse) error
	Recv() (*UploadRequest, error)
}

type userServiceUploadStream struct {
	stream server.Stream
}

func (x *userServiceUploadStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceUploadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceUploadStream) Send(m *UploadResponse) error {
	return x.stream.Send(m)
}

func (x *userServiceUploadStream) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *userServiceHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(DownloadRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.UserServiceHandler.Download(ctx, m, &userServiceDownloadStream{stream})
}

type UserService_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResponse) error
}

type userServiceDownloadStream struct {
	stream server.Stream
}

func (x *userServiceDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *userServiceDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *userServiceDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *userServiceDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *userServiceDownloadStream) Send(m *DownloadResponse) error {
	return x.stream.Send(m)
}
