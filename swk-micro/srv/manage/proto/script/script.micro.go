// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: script.proto

package script

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ScriptService service

func NewScriptServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ScriptService service

type ScriptService interface {
	FindScriptJobs(ctx context.Context, in *FindScriptJobsRequest, opts ...client.CallOption) (*FindScriptJobsResponse, error)
	FindScriptJob(ctx context.Context, in *FindScriptJobRequest, opts ...client.CallOption) (*FindScriptJobResponse, error)
	AddScriptJob(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	ModifyScriptJob(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error)
	StartScriptJob(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error)
	AddScriptLog(ctx context.Context, in *AddScriptLogRequest, opts ...client.CallOption) (*AddScriptLogResponse, error)
	DeleteDuplicateAndAddIndex(ctx context.Context, in *DeleteScriptsRequest, opts ...client.CallOption) (*DeleteScriptsResponse, error)
}

type scriptService struct {
	c    client.Client
	name string
}

func NewScriptService(name string, c client.Client) ScriptService {
	return &scriptService{
		c:    c,
		name: name,
	}
}

func (c *scriptService) FindScriptJobs(ctx context.Context, in *FindScriptJobsRequest, opts ...client.CallOption) (*FindScriptJobsResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.FindScriptJobs", in)
	out := new(FindScriptJobsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) FindScriptJob(ctx context.Context, in *FindScriptJobRequest, opts ...client.CallOption) (*FindScriptJobResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.FindScriptJob", in)
	out := new(FindScriptJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) AddScriptJob(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.AddScriptJob", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) ModifyScriptJob(ctx context.Context, in *ModifyRequest, opts ...client.CallOption) (*ModifyResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.ModifyScriptJob", in)
	out := new(ModifyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) StartScriptJob(ctx context.Context, in *StartRequest, opts ...client.CallOption) (*StartResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.StartScriptJob", in)
	out := new(StartResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) AddScriptLog(ctx context.Context, in *AddScriptLogRequest, opts ...client.CallOption) (*AddScriptLogResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.AddScriptLog", in)
	out := new(AddScriptLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scriptService) DeleteDuplicateAndAddIndex(ctx context.Context, in *DeleteScriptsRequest, opts ...client.CallOption) (*DeleteScriptsResponse, error) {
	req := c.c.NewRequest(c.name, "ScriptService.DeleteDuplicateAndAddIndex", in)
	out := new(DeleteScriptsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ScriptService service

type ScriptServiceHandler interface {
	FindScriptJobs(context.Context, *FindScriptJobsRequest, *FindScriptJobsResponse) error
	FindScriptJob(context.Context, *FindScriptJobRequest, *FindScriptJobResponse) error
	AddScriptJob(context.Context, *AddRequest, *AddResponse) error
	ModifyScriptJob(context.Context, *ModifyRequest, *ModifyResponse) error
	StartScriptJob(context.Context, *StartRequest, *StartResponse) error
	AddScriptLog(context.Context, *AddScriptLogRequest, *AddScriptLogResponse) error
	DeleteDuplicateAndAddIndex(context.Context, *DeleteScriptsRequest, *DeleteScriptsResponse) error
}

func RegisterScriptServiceHandler(s server.Server, hdlr ScriptServiceHandler, opts ...server.HandlerOption) error {
	type scriptService interface {
		FindScriptJobs(ctx context.Context, in *FindScriptJobsRequest, out *FindScriptJobsResponse) error
		FindScriptJob(ctx context.Context, in *FindScriptJobRequest, out *FindScriptJobResponse) error
		AddScriptJob(ctx context.Context, in *AddRequest, out *AddResponse) error
		ModifyScriptJob(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error
		StartScriptJob(ctx context.Context, in *StartRequest, out *StartResponse) error
		AddScriptLog(ctx context.Context, in *AddScriptLogRequest, out *AddScriptLogResponse) error
		DeleteDuplicateAndAddIndex(ctx context.Context, in *DeleteScriptsRequest, out *DeleteScriptsResponse) error
	}
	type ScriptService struct {
		scriptService
	}
	h := &scriptServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ScriptService{h}, opts...))
}

type scriptServiceHandler struct {
	ScriptServiceHandler
}

func (h *scriptServiceHandler) FindScriptJobs(ctx context.Context, in *FindScriptJobsRequest, out *FindScriptJobsResponse) error {
	return h.ScriptServiceHandler.FindScriptJobs(ctx, in, out)
}

func (h *scriptServiceHandler) FindScriptJob(ctx context.Context, in *FindScriptJobRequest, out *FindScriptJobResponse) error {
	return h.ScriptServiceHandler.FindScriptJob(ctx, in, out)
}

func (h *scriptServiceHandler) AddScriptJob(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.ScriptServiceHandler.AddScriptJob(ctx, in, out)
}

func (h *scriptServiceHandler) ModifyScriptJob(ctx context.Context, in *ModifyRequest, out *ModifyResponse) error {
	return h.ScriptServiceHandler.ModifyScriptJob(ctx, in, out)
}

func (h *scriptServiceHandler) StartScriptJob(ctx context.Context, in *StartRequest, out *StartResponse) error {
	return h.ScriptServiceHandler.StartScriptJob(ctx, in, out)
}

func (h *scriptServiceHandler) AddScriptLog(ctx context.Context, in *AddScriptLogRequest, out *AddScriptLogResponse) error {
	return h.ScriptServiceHandler.AddScriptLog(ctx, in, out)
}

func (h *scriptServiceHandler) DeleteDuplicateAndAddIndex(ctx context.Context, in *DeleteScriptsRequest, out *DeleteScriptsResponse) error {
	return h.ScriptServiceHandler.DeleteDuplicateAndAddIndex(ctx, in, out)
}
