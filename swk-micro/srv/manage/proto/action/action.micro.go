// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: action.proto

package action

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ActionService service

func NewActionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ActionService service

type ActionService interface {
	FindActions(ctx context.Context, in *FindActionsRequest, opts ...client.CallOption) (*FindActionsResponse, error)
	FindAction(ctx context.Context, in *FindActionRequest, opts ...client.CallOption) (*FindActionResponse, error)
	AddAction(ctx context.Context, in *AddActionRequest, opts ...client.CallOption) (*AddActionResponse, error)
	ModifyAction(ctx context.Context, in *ModifyActionRequest, opts ...client.CallOption) (*ModifyActionResponse, error)
	DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...client.CallOption) (*DeleteActionResponse, error)
	DeleteActions(ctx context.Context, in *DeleteActionsRequest, opts ...client.CallOption) (*DeleteActionsResponse, error)
}

type actionService struct {
	c    client.Client
	name string
}

func NewActionService(name string, c client.Client) ActionService {
	return &actionService{
		c:    c,
		name: name,
	}
}

func (c *actionService) FindActions(ctx context.Context, in *FindActionsRequest, opts ...client.CallOption) (*FindActionsResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.FindActions", in)
	out := new(FindActionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) FindAction(ctx context.Context, in *FindActionRequest, opts ...client.CallOption) (*FindActionResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.FindAction", in)
	out := new(FindActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) AddAction(ctx context.Context, in *AddActionRequest, opts ...client.CallOption) (*AddActionResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.AddAction", in)
	out := new(AddActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) ModifyAction(ctx context.Context, in *ModifyActionRequest, opts ...client.CallOption) (*ModifyActionResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.ModifyAction", in)
	out := new(ModifyActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) DeleteAction(ctx context.Context, in *DeleteActionRequest, opts ...client.CallOption) (*DeleteActionResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.DeleteAction", in)
	out := new(DeleteActionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionService) DeleteActions(ctx context.Context, in *DeleteActionsRequest, opts ...client.CallOption) (*DeleteActionsResponse, error) {
	req := c.c.NewRequest(c.name, "ActionService.DeleteActions", in)
	out := new(DeleteActionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ActionService service

type ActionServiceHandler interface {
	FindActions(context.Context, *FindActionsRequest, *FindActionsResponse) error
	FindAction(context.Context, *FindActionRequest, *FindActionResponse) error
	AddAction(context.Context, *AddActionRequest, *AddActionResponse) error
	ModifyAction(context.Context, *ModifyActionRequest, *ModifyActionResponse) error
	DeleteAction(context.Context, *DeleteActionRequest, *DeleteActionResponse) error
	DeleteActions(context.Context, *DeleteActionsRequest, *DeleteActionsResponse) error
}

func RegisterActionServiceHandler(s server.Server, hdlr ActionServiceHandler, opts ...server.HandlerOption) error {
	type actionService interface {
		FindActions(ctx context.Context, in *FindActionsRequest, out *FindActionsResponse) error
		FindAction(ctx context.Context, in *FindActionRequest, out *FindActionResponse) error
		AddAction(ctx context.Context, in *AddActionRequest, out *AddActionResponse) error
		ModifyAction(ctx context.Context, in *ModifyActionRequest, out *ModifyActionResponse) error
		DeleteAction(ctx context.Context, in *DeleteActionRequest, out *DeleteActionResponse) error
		DeleteActions(ctx context.Context, in *DeleteActionsRequest, out *DeleteActionsResponse) error
	}
	type ActionService struct {
		actionService
	}
	h := &actionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ActionService{h}, opts...))
}

type actionServiceHandler struct {
	ActionServiceHandler
}

func (h *actionServiceHandler) FindActions(ctx context.Context, in *FindActionsRequest, out *FindActionsResponse) error {
	return h.ActionServiceHandler.FindActions(ctx, in, out)
}

func (h *actionServiceHandler) FindAction(ctx context.Context, in *FindActionRequest, out *FindActionResponse) error {
	return h.ActionServiceHandler.FindAction(ctx, in, out)
}

func (h *actionServiceHandler) AddAction(ctx context.Context, in *AddActionRequest, out *AddActionResponse) error {
	return h.ActionServiceHandler.AddAction(ctx, in, out)
}

func (h *actionServiceHandler) ModifyAction(ctx context.Context, in *ModifyActionRequest, out *ModifyActionResponse) error {
	return h.ActionServiceHandler.ModifyAction(ctx, in, out)
}

func (h *actionServiceHandler) DeleteAction(ctx context.Context, in *DeleteActionRequest, out *DeleteActionResponse) error {
	return h.ActionServiceHandler.DeleteAction(ctx, in, out)
}

func (h *actionServiceHandler) DeleteActions(ctx context.Context, in *DeleteActionsRequest, out *DeleteActionsResponse) error {
	return h.ActionServiceHandler.DeleteActions(ctx, in, out)
}
