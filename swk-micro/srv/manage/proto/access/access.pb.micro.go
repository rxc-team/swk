// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: access.proto

package access

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AccessService service

func NewAccessServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AccessService service

type AccessService interface {
	FindUserAccess(ctx context.Context, in *FindUserAccesssRequest, opts ...client.CallOption) (*FindUserAccesssResponse, error)
	FindAccess(ctx context.Context, in *FindAccessRequest, opts ...client.CallOption) (*FindAccessResponse, error)
	FindOneAccess(ctx context.Context, in *FindOneAccessRequest, opts ...client.CallOption) (*FindOneAccessResponse, error)
	AddAccess(ctx context.Context, in *AddAccessRequest, opts ...client.CallOption) (*AddAccessResponse, error)
	DeleteSelectAccess(ctx context.Context, in *DeleteSelectAccessRequest, opts ...client.CallOption) (*DeleteSelectAccessResponse, error)
	HardDeleteAccess(ctx context.Context, in *HardDeleteAccessRequest, opts ...client.CallOption) (*HardDeleteAccessResponse, error)
	RecoverSelectAccess(ctx context.Context, in *RecoverSelectAccessRequest, opts ...client.CallOption) (*RecoverSelectAccessResponse, error)
}

type accessService struct {
	c    client.Client
	name string
}

func NewAccessService(name string, c client.Client) AccessService {
	return &accessService{
		c:    c,
		name: name,
	}
}

func (c *accessService) FindUserAccess(ctx context.Context, in *FindUserAccesssRequest, opts ...client.CallOption) (*FindUserAccesssResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.FindUserAccess", in)
	out := new(FindUserAccesssResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) FindAccess(ctx context.Context, in *FindAccessRequest, opts ...client.CallOption) (*FindAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.FindAccess", in)
	out := new(FindAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) FindOneAccess(ctx context.Context, in *FindOneAccessRequest, opts ...client.CallOption) (*FindOneAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.FindOneAccess", in)
	out := new(FindOneAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) AddAccess(ctx context.Context, in *AddAccessRequest, opts ...client.CallOption) (*AddAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.AddAccess", in)
	out := new(AddAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) DeleteSelectAccess(ctx context.Context, in *DeleteSelectAccessRequest, opts ...client.CallOption) (*DeleteSelectAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.DeleteSelectAccess", in)
	out := new(DeleteSelectAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) HardDeleteAccess(ctx context.Context, in *HardDeleteAccessRequest, opts ...client.CallOption) (*HardDeleteAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.HardDeleteAccess", in)
	out := new(HardDeleteAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessService) RecoverSelectAccess(ctx context.Context, in *RecoverSelectAccessRequest, opts ...client.CallOption) (*RecoverSelectAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AccessService.RecoverSelectAccess", in)
	out := new(RecoverSelectAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccessService service

type AccessServiceHandler interface {
	FindUserAccess(context.Context, *FindUserAccesssRequest, *FindUserAccesssResponse) error
	FindAccess(context.Context, *FindAccessRequest, *FindAccessResponse) error
	FindOneAccess(context.Context, *FindOneAccessRequest, *FindOneAccessResponse) error
	AddAccess(context.Context, *AddAccessRequest, *AddAccessResponse) error
	DeleteSelectAccess(context.Context, *DeleteSelectAccessRequest, *DeleteSelectAccessResponse) error
	HardDeleteAccess(context.Context, *HardDeleteAccessRequest, *HardDeleteAccessResponse) error
	RecoverSelectAccess(context.Context, *RecoverSelectAccessRequest, *RecoverSelectAccessResponse) error
}

func RegisterAccessServiceHandler(s server.Server, hdlr AccessServiceHandler, opts ...server.HandlerOption) error {
	type accessService interface {
		FindUserAccess(ctx context.Context, in *FindUserAccesssRequest, out *FindUserAccesssResponse) error
		FindAccess(ctx context.Context, in *FindAccessRequest, out *FindAccessResponse) error
		FindOneAccess(ctx context.Context, in *FindOneAccessRequest, out *FindOneAccessResponse) error
		AddAccess(ctx context.Context, in *AddAccessRequest, out *AddAccessResponse) error
		DeleteSelectAccess(ctx context.Context, in *DeleteSelectAccessRequest, out *DeleteSelectAccessResponse) error
		HardDeleteAccess(ctx context.Context, in *HardDeleteAccessRequest, out *HardDeleteAccessResponse) error
		RecoverSelectAccess(ctx context.Context, in *RecoverSelectAccessRequest, out *RecoverSelectAccessResponse) error
	}
	type AccessService struct {
		accessService
	}
	h := &accessServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AccessService{h}, opts...))
}

type accessServiceHandler struct {
	AccessServiceHandler
}

func (h *accessServiceHandler) FindUserAccess(ctx context.Context, in *FindUserAccesssRequest, out *FindUserAccesssResponse) error {
	return h.AccessServiceHandler.FindUserAccess(ctx, in, out)
}

func (h *accessServiceHandler) FindAccess(ctx context.Context, in *FindAccessRequest, out *FindAccessResponse) error {
	return h.AccessServiceHandler.FindAccess(ctx, in, out)
}

func (h *accessServiceHandler) FindOneAccess(ctx context.Context, in *FindOneAccessRequest, out *FindOneAccessResponse) error {
	return h.AccessServiceHandler.FindOneAccess(ctx, in, out)
}

func (h *accessServiceHandler) AddAccess(ctx context.Context, in *AddAccessRequest, out *AddAccessResponse) error {
	return h.AccessServiceHandler.AddAccess(ctx, in, out)
}

func (h *accessServiceHandler) DeleteSelectAccess(ctx context.Context, in *DeleteSelectAccessRequest, out *DeleteSelectAccessResponse) error {
	return h.AccessServiceHandler.DeleteSelectAccess(ctx, in, out)
}

func (h *accessServiceHandler) HardDeleteAccess(ctx context.Context, in *HardDeleteAccessRequest, out *HardDeleteAccessResponse) error {
	return h.AccessServiceHandler.HardDeleteAccess(ctx, in, out)
}

func (h *accessServiceHandler) RecoverSelectAccess(ctx context.Context, in *RecoverSelectAccessRequest, out *RecoverSelectAccessResponse) error {
	return h.AccessServiceHandler.RecoverSelectAccess(ctx, in, out)
}
