// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: role.proto

package role

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for RoleService service

func NewRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for RoleService service

type RoleService interface {
	FindRoles(ctx context.Context, in *FindRolesRequest, opts ...client.CallOption) (*FindRolesResponse, error)
	FindRole(ctx context.Context, in *FindRoleRequest, opts ...client.CallOption) (*FindRoleResponse, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error)
	ModifyRole(ctx context.Context, in *ModifyRoleRequest, opts ...client.CallOption) (*ModifyRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error)
	DeleteSelectRoles(ctx context.Context, in *DeleteSelectRolesRequest, opts ...client.CallOption) (*DeleteSelectRolesResponse, error)
	HardDeleteRoles(ctx context.Context, in *HardDeleteRolesRequest, opts ...client.CallOption) (*HardDeleteRolesResponse, error)
	RecoverSelectRoles(ctx context.Context, in *RecoverSelectRolesRequest, opts ...client.CallOption) (*RecoverSelectRolesResponse, error)
	WhitelistClear(ctx context.Context, in *WhitelistClearRequest, opts ...client.CallOption) (*WhitelistClearResponse, error)
}

type roleService struct {
	c    client.Client
	name string
}

func NewRoleService(name string, c client.Client) RoleService {
	return &roleService{
		c:    c,
		name: name,
	}
}

func (c *roleService) FindRoles(ctx context.Context, in *FindRolesRequest, opts ...client.CallOption) (*FindRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.FindRoles", in)
	out := new(FindRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) FindRole(ctx context.Context, in *FindRoleRequest, opts ...client.CallOption) (*FindRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.FindRole", in)
	out := new(FindRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.AddRole", in)
	out := new(AddRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) ModifyRole(ctx context.Context, in *ModifyRoleRequest, opts ...client.CallOption) (*ModifyRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.ModifyRole", in)
	out := new(ModifyRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...client.CallOption) (*DeleteRoleResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.DeleteRole", in)
	out := new(DeleteRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) DeleteSelectRoles(ctx context.Context, in *DeleteSelectRolesRequest, opts ...client.CallOption) (*DeleteSelectRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.DeleteSelectRoles", in)
	out := new(DeleteSelectRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) HardDeleteRoles(ctx context.Context, in *HardDeleteRolesRequest, opts ...client.CallOption) (*HardDeleteRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.HardDeleteRoles", in)
	out := new(HardDeleteRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) RecoverSelectRoles(ctx context.Context, in *RecoverSelectRolesRequest, opts ...client.CallOption) (*RecoverSelectRolesResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.RecoverSelectRoles", in)
	out := new(RecoverSelectRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleService) WhitelistClear(ctx context.Context, in *WhitelistClearRequest, opts ...client.CallOption) (*WhitelistClearResponse, error) {
	req := c.c.NewRequest(c.name, "RoleService.WhitelistClear", in)
	out := new(WhitelistClearResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceHandler interface {
	FindRoles(context.Context, *FindRolesRequest, *FindRolesResponse) error
	FindRole(context.Context, *FindRoleRequest, *FindRoleResponse) error
	AddRole(context.Context, *AddRoleRequest, *AddRoleResponse) error
	ModifyRole(context.Context, *ModifyRoleRequest, *ModifyRoleResponse) error
	DeleteRole(context.Context, *DeleteRoleRequest, *DeleteRoleResponse) error
	DeleteSelectRoles(context.Context, *DeleteSelectRolesRequest, *DeleteSelectRolesResponse) error
	HardDeleteRoles(context.Context, *HardDeleteRolesRequest, *HardDeleteRolesResponse) error
	RecoverSelectRoles(context.Context, *RecoverSelectRolesRequest, *RecoverSelectRolesResponse) error
	WhitelistClear(context.Context, *WhitelistClearRequest, *WhitelistClearResponse) error
}

func RegisterRoleServiceHandler(s server.Server, hdlr RoleServiceHandler, opts ...server.HandlerOption) error {
	type roleService interface {
		FindRoles(ctx context.Context, in *FindRolesRequest, out *FindRolesResponse) error
		FindRole(ctx context.Context, in *FindRoleRequest, out *FindRoleResponse) error
		AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error
		ModifyRole(ctx context.Context, in *ModifyRoleRequest, out *ModifyRoleResponse) error
		DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error
		DeleteSelectRoles(ctx context.Context, in *DeleteSelectRolesRequest, out *DeleteSelectRolesResponse) error
		HardDeleteRoles(ctx context.Context, in *HardDeleteRolesRequest, out *HardDeleteRolesResponse) error
		RecoverSelectRoles(ctx context.Context, in *RecoverSelectRolesRequest, out *RecoverSelectRolesResponse) error
		WhitelistClear(ctx context.Context, in *WhitelistClearRequest, out *WhitelistClearResponse) error
	}
	type RoleService struct {
		roleService
	}
	h := &roleServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&RoleService{h}, opts...))
}

type roleServiceHandler struct {
	RoleServiceHandler
}

func (h *roleServiceHandler) FindRoles(ctx context.Context, in *FindRolesRequest, out *FindRolesResponse) error {
	return h.RoleServiceHandler.FindRoles(ctx, in, out)
}

func (h *roleServiceHandler) FindRole(ctx context.Context, in *FindRoleRequest, out *FindRoleResponse) error {
	return h.RoleServiceHandler.FindRole(ctx, in, out)
}

func (h *roleServiceHandler) AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleResponse) error {
	return h.RoleServiceHandler.AddRole(ctx, in, out)
}

func (h *roleServiceHandler) ModifyRole(ctx context.Context, in *ModifyRoleRequest, out *ModifyRoleResponse) error {
	return h.RoleServiceHandler.ModifyRole(ctx, in, out)
}

func (h *roleServiceHandler) DeleteRole(ctx context.Context, in *DeleteRoleRequest, out *DeleteRoleResponse) error {
	return h.RoleServiceHandler.DeleteRole(ctx, in, out)
}

func (h *roleServiceHandler) DeleteSelectRoles(ctx context.Context, in *DeleteSelectRolesRequest, out *DeleteSelectRolesResponse) error {
	return h.RoleServiceHandler.DeleteSelectRoles(ctx, in, out)
}

func (h *roleServiceHandler) HardDeleteRoles(ctx context.Context, in *HardDeleteRolesRequest, out *HardDeleteRolesResponse) error {
	return h.RoleServiceHandler.HardDeleteRoles(ctx, in, out)
}

func (h *roleServiceHandler) RecoverSelectRoles(ctx context.Context, in *RecoverSelectRolesRequest, out *RecoverSelectRolesResponse) error {
	return h.RoleServiceHandler.RecoverSelectRoles(ctx, in, out)
}

func (h *roleServiceHandler) WhitelistClear(ctx context.Context, in *WhitelistClearRequest, out *WhitelistClearResponse) error {
	return h.RoleServiceHandler.WhitelistClear(ctx, in, out)
}
