// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logger.proto

package logger

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LoggerService service

func NewLoggerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LoggerService service

type LoggerService interface {
	// 获取该domain下的所有日志
	FindLoggers(ctx context.Context, in *LoggersRequest, opts ...client.CallOption) (*LoggersResponse, error)
	// 添加日志记录
	AddLogger(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
	// 创建日志索引
	CreateLoggerIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error)
}

type loggerService struct {
	c    client.Client
	name string
}

func NewLoggerService(name string, c client.Client) LoggerService {
	return &loggerService{
		c:    c,
		name: name,
	}
}

func (c *loggerService) FindLoggers(ctx context.Context, in *LoggersRequest, opts ...client.CallOption) (*LoggersResponse, error) {
	req := c.c.NewRequest(c.name, "LoggerService.FindLoggers", in)
	out := new(LoggersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerService) AddLogger(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "LoggerService.AddLogger", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerService) CreateLoggerIndex(ctx context.Context, in *CreateIndexRequest, opts ...client.CallOption) (*CreateIndexResponse, error) {
	req := c.c.NewRequest(c.name, "LoggerService.CreateLoggerIndex", in)
	out := new(CreateIndexResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LoggerService service

type LoggerServiceHandler interface {
	// 获取该domain下的所有日志
	FindLoggers(context.Context, *LoggersRequest, *LoggersResponse) error
	// 添加日志记录
	AddLogger(context.Context, *AddRequest, *AddResponse) error
	// 创建日志索引
	CreateLoggerIndex(context.Context, *CreateIndexRequest, *CreateIndexResponse) error
}

func RegisterLoggerServiceHandler(s server.Server, hdlr LoggerServiceHandler, opts ...server.HandlerOption) error {
	type loggerService interface {
		FindLoggers(ctx context.Context, in *LoggersRequest, out *LoggersResponse) error
		AddLogger(ctx context.Context, in *AddRequest, out *AddResponse) error
		CreateLoggerIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error
	}
	type LoggerService struct {
		loggerService
	}
	h := &loggerServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LoggerService{h}, opts...))
}

type loggerServiceHandler struct {
	LoggerServiceHandler
}

func (h *loggerServiceHandler) FindLoggers(ctx context.Context, in *LoggersRequest, out *LoggersResponse) error {
	return h.LoggerServiceHandler.FindLoggers(ctx, in, out)
}

func (h *loggerServiceHandler) AddLogger(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.LoggerServiceHandler.AddLogger(ctx, in, out)
}

func (h *loggerServiceHandler) CreateLoggerIndex(ctx context.Context, in *CreateIndexRequest, out *CreateIndexResponse) error {
	return h.LoggerServiceHandler.CreateLoggerIndex(ctx, in, out)
}
