// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: help.proto

package help

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HelpService service

func NewHelpServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HelpService service

type HelpService interface {
	// 获取单个帮助文档
	FindHelp(ctx context.Context, in *FindHelpRequest, opts ...client.CallOption) (*FindHelpResponse, error)
	// 获取多个帮助文档
	FindHelps(ctx context.Context, in *FindHelpsRequest, opts ...client.CallOption) (*FindHelpsResponse, error)
	// 获取所有不重复帮助文档标签
	FindTags(ctx context.Context, in *FindTagsRequest, opts ...client.CallOption) (*FindTagsResponse, error)
	// 添加帮助文档
	AddHelp(ctx context.Context, in *AddHelpRequest, opts ...client.CallOption) (*AddHelpResponse, error)
	// 更新帮助文档
	ModifyHelp(ctx context.Context, in *ModifyHelpRequest, opts ...client.CallOption) (*ModifyHelpResponse, error)
	// 硬删除帮助文档
	DeleteHelp(ctx context.Context, in *DeleteHelpRequest, opts ...client.CallOption) (*DeleteHelpResponse, error)
	// 硬删除多个帮助文档
	DeleteHelps(ctx context.Context, in *DeleteHelpsRequest, opts ...client.CallOption) (*DeleteHelpsResponse, error)
}

type helpService struct {
	c    client.Client
	name string
}

func NewHelpService(name string, c client.Client) HelpService {
	return &helpService{
		c:    c,
		name: name,
	}
}

func (c *helpService) FindHelp(ctx context.Context, in *FindHelpRequest, opts ...client.CallOption) (*FindHelpResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.FindHelp", in)
	out := new(FindHelpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) FindHelps(ctx context.Context, in *FindHelpsRequest, opts ...client.CallOption) (*FindHelpsResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.FindHelps", in)
	out := new(FindHelpsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) FindTags(ctx context.Context, in *FindTagsRequest, opts ...client.CallOption) (*FindTagsResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.FindTags", in)
	out := new(FindTagsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) AddHelp(ctx context.Context, in *AddHelpRequest, opts ...client.CallOption) (*AddHelpResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.AddHelp", in)
	out := new(AddHelpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) ModifyHelp(ctx context.Context, in *ModifyHelpRequest, opts ...client.CallOption) (*ModifyHelpResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.ModifyHelp", in)
	out := new(ModifyHelpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) DeleteHelp(ctx context.Context, in *DeleteHelpRequest, opts ...client.CallOption) (*DeleteHelpResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.DeleteHelp", in)
	out := new(DeleteHelpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helpService) DeleteHelps(ctx context.Context, in *DeleteHelpsRequest, opts ...client.CallOption) (*DeleteHelpsResponse, error) {
	req := c.c.NewRequest(c.name, "HelpService.DeleteHelps", in)
	out := new(DeleteHelpsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HelpService service

type HelpServiceHandler interface {
	// 获取单个帮助文档
	FindHelp(context.Context, *FindHelpRequest, *FindHelpResponse) error
	// 获取多个帮助文档
	FindHelps(context.Context, *FindHelpsRequest, *FindHelpsResponse) error
	// 获取所有不重复帮助文档标签
	FindTags(context.Context, *FindTagsRequest, *FindTagsResponse) error
	// 添加帮助文档
	AddHelp(context.Context, *AddHelpRequest, *AddHelpResponse) error
	// 更新帮助文档
	ModifyHelp(context.Context, *ModifyHelpRequest, *ModifyHelpResponse) error
	// 硬删除帮助文档
	DeleteHelp(context.Context, *DeleteHelpRequest, *DeleteHelpResponse) error
	// 硬删除多个帮助文档
	DeleteHelps(context.Context, *DeleteHelpsRequest, *DeleteHelpsResponse) error
}

func RegisterHelpServiceHandler(s server.Server, hdlr HelpServiceHandler, opts ...server.HandlerOption) error {
	type helpService interface {
		FindHelp(ctx context.Context, in *FindHelpRequest, out *FindHelpResponse) error
		FindHelps(ctx context.Context, in *FindHelpsRequest, out *FindHelpsResponse) error
		FindTags(ctx context.Context, in *FindTagsRequest, out *FindTagsResponse) error
		AddHelp(ctx context.Context, in *AddHelpRequest, out *AddHelpResponse) error
		ModifyHelp(ctx context.Context, in *ModifyHelpRequest, out *ModifyHelpResponse) error
		DeleteHelp(ctx context.Context, in *DeleteHelpRequest, out *DeleteHelpResponse) error
		DeleteHelps(ctx context.Context, in *DeleteHelpsRequest, out *DeleteHelpsResponse) error
	}
	type HelpService struct {
		helpService
	}
	h := &helpServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HelpService{h}, opts...))
}

type helpServiceHandler struct {
	HelpServiceHandler
}

func (h *helpServiceHandler) FindHelp(ctx context.Context, in *FindHelpRequest, out *FindHelpResponse) error {
	return h.HelpServiceHandler.FindHelp(ctx, in, out)
}

func (h *helpServiceHandler) FindHelps(ctx context.Context, in *FindHelpsRequest, out *FindHelpsResponse) error {
	return h.HelpServiceHandler.FindHelps(ctx, in, out)
}

func (h *helpServiceHandler) FindTags(ctx context.Context, in *FindTagsRequest, out *FindTagsResponse) error {
	return h.HelpServiceHandler.FindTags(ctx, in, out)
}

func (h *helpServiceHandler) AddHelp(ctx context.Context, in *AddHelpRequest, out *AddHelpResponse) error {
	return h.HelpServiceHandler.AddHelp(ctx, in, out)
}

func (h *helpServiceHandler) ModifyHelp(ctx context.Context, in *ModifyHelpRequest, out *ModifyHelpResponse) error {
	return h.HelpServiceHandler.ModifyHelp(ctx, in, out)
}

func (h *helpServiceHandler) DeleteHelp(ctx context.Context, in *DeleteHelpRequest, out *DeleteHelpResponse) error {
	return h.HelpServiceHandler.DeleteHelp(ctx, in, out)
}

func (h *helpServiceHandler) DeleteHelps(ctx context.Context, in *DeleteHelpsRequest, out *DeleteHelpsResponse) error {
	return h.HelpServiceHandler.DeleteHelps(ctx, in, out)
}
