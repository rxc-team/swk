// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: type.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TypeService service

func NewTypeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TypeService service

type TypeService interface {
	// 获取单个帮助文档类型
	FindType(ctx context.Context, in *FindTypeRequest, opts ...client.CallOption) (*FindTypeResponse, error)
	// 获取多个帮助文档类型
	FindTypes(ctx context.Context, in *FindTypesRequest, opts ...client.CallOption) (*FindTypesResponse, error)
	// 添加帮助文档类型
	AddType(ctx context.Context, in *AddTypeRequest, opts ...client.CallOption) (*AddTypeResponse, error)
	// 更新帮助文档类型
	ModifyType(ctx context.Context, in *ModifyTypeRequest, opts ...client.CallOption) (*ModifyTypeResponse, error)
	// 硬删除帮助文档类型
	DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...client.CallOption) (*DeleteTypeResponse, error)
	// 硬删除多个帮助文档类型
	DeleteTypes(ctx context.Context, in *DeleteTypesRequest, opts ...client.CallOption) (*DeleteTypesResponse, error)
}

type typeService struct {
	c    client.Client
	name string
}

func NewTypeService(name string, c client.Client) TypeService {
	return &typeService{
		c:    c,
		name: name,
	}
}

func (c *typeService) FindType(ctx context.Context, in *FindTypeRequest, opts ...client.CallOption) (*FindTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.FindType", in)
	out := new(FindTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeService) FindTypes(ctx context.Context, in *FindTypesRequest, opts ...client.CallOption) (*FindTypesResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.FindTypes", in)
	out := new(FindTypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeService) AddType(ctx context.Context, in *AddTypeRequest, opts ...client.CallOption) (*AddTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.AddType", in)
	out := new(AddTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeService) ModifyType(ctx context.Context, in *ModifyTypeRequest, opts ...client.CallOption) (*ModifyTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.ModifyType", in)
	out := new(ModifyTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeService) DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...client.CallOption) (*DeleteTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.DeleteType", in)
	out := new(DeleteTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *typeService) DeleteTypes(ctx context.Context, in *DeleteTypesRequest, opts ...client.CallOption) (*DeleteTypesResponse, error) {
	req := c.c.NewRequest(c.name, "TypeService.DeleteTypes", in)
	out := new(DeleteTypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TypeService service

type TypeServiceHandler interface {
	// 获取单个帮助文档类型
	FindType(context.Context, *FindTypeRequest, *FindTypeResponse) error
	// 获取多个帮助文档类型
	FindTypes(context.Context, *FindTypesRequest, *FindTypesResponse) error
	// 添加帮助文档类型
	AddType(context.Context, *AddTypeRequest, *AddTypeResponse) error
	// 更新帮助文档类型
	ModifyType(context.Context, *ModifyTypeRequest, *ModifyTypeResponse) error
	// 硬删除帮助文档类型
	DeleteType(context.Context, *DeleteTypeRequest, *DeleteTypeResponse) error
	// 硬删除多个帮助文档类型
	DeleteTypes(context.Context, *DeleteTypesRequest, *DeleteTypesResponse) error
}

func RegisterTypeServiceHandler(s server.Server, hdlr TypeServiceHandler, opts ...server.HandlerOption) error {
	type typeService interface {
		FindType(ctx context.Context, in *FindTypeRequest, out *FindTypeResponse) error
		FindTypes(ctx context.Context, in *FindTypesRequest, out *FindTypesResponse) error
		AddType(ctx context.Context, in *AddTypeRequest, out *AddTypeResponse) error
		ModifyType(ctx context.Context, in *ModifyTypeRequest, out *ModifyTypeResponse) error
		DeleteType(ctx context.Context, in *DeleteTypeRequest, out *DeleteTypeResponse) error
		DeleteTypes(ctx context.Context, in *DeleteTypesRequest, out *DeleteTypesResponse) error
	}
	type TypeService struct {
		typeService
	}
	h := &typeServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TypeService{h}, opts...))
}

type typeServiceHandler struct {
	TypeServiceHandler
}

func (h *typeServiceHandler) FindType(ctx context.Context, in *FindTypeRequest, out *FindTypeResponse) error {
	return h.TypeServiceHandler.FindType(ctx, in, out)
}

func (h *typeServiceHandler) FindTypes(ctx context.Context, in *FindTypesRequest, out *FindTypesResponse) error {
	return h.TypeServiceHandler.FindTypes(ctx, in, out)
}

func (h *typeServiceHandler) AddType(ctx context.Context, in *AddTypeRequest, out *AddTypeResponse) error {
	return h.TypeServiceHandler.AddType(ctx, in, out)
}

func (h *typeServiceHandler) ModifyType(ctx context.Context, in *ModifyTypeRequest, out *ModifyTypeResponse) error {
	return h.TypeServiceHandler.ModifyType(ctx, in, out)
}

func (h *typeServiceHandler) DeleteType(ctx context.Context, in *DeleteTypeRequest, out *DeleteTypeResponse) error {
	return h.TypeServiceHandler.DeleteType(ctx, in, out)
}

func (h *typeServiceHandler) DeleteTypes(ctx context.Context, in *DeleteTypesRequest, out *DeleteTypesResponse) error {
	return h.TypeServiceHandler.DeleteTypes(ctx, in, out)
}
