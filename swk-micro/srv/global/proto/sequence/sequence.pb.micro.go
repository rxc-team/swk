// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sequence.proto

package sequence

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SequenceService service

func NewSequenceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SequenceService service

type SequenceService interface {
	// 获取seq
	FindSequence(ctx context.Context, in *FindSequenceRequest, opts ...client.CallOption) (*FindSequenceResponse, error)
	// 创建seq
	AddSequence(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error)
}

type sequenceService struct {
	c    client.Client
	name string
}

func NewSequenceService(name string, c client.Client) SequenceService {
	return &sequenceService{
		c:    c,
		name: name,
	}
}

func (c *sequenceService) FindSequence(ctx context.Context, in *FindSequenceRequest, opts ...client.CallOption) (*FindSequenceResponse, error) {
	req := c.c.NewRequest(c.name, "SequenceService.FindSequence", in)
	out := new(FindSequenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sequenceService) AddSequence(ctx context.Context, in *AddRequest, opts ...client.CallOption) (*AddResponse, error) {
	req := c.c.NewRequest(c.name, "SequenceService.AddSequence", in)
	out := new(AddResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SequenceService service

type SequenceServiceHandler interface {
	// 获取seq
	FindSequence(context.Context, *FindSequenceRequest, *FindSequenceResponse) error
	// 创建seq
	AddSequence(context.Context, *AddRequest, *AddResponse) error
}

func RegisterSequenceServiceHandler(s server.Server, hdlr SequenceServiceHandler, opts ...server.HandlerOption) error {
	type sequenceService interface {
		FindSequence(ctx context.Context, in *FindSequenceRequest, out *FindSequenceResponse) error
		AddSequence(ctx context.Context, in *AddRequest, out *AddResponse) error
	}
	type SequenceService struct {
		sequenceService
	}
	h := &sequenceServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SequenceService{h}, opts...))
}

type sequenceServiceHandler struct {
	SequenceServiceHandler
}

func (h *sequenceServiceHandler) FindSequence(ctx context.Context, in *FindSequenceRequest, out *FindSequenceResponse) error {
	return h.SequenceServiceHandler.FindSequence(ctx, in, out)
}

func (h *sequenceServiceHandler) AddSequence(ctx context.Context, in *AddRequest, out *AddResponse) error {
	return h.SequenceServiceHandler.AddSequence(ctx, in, out)
}
