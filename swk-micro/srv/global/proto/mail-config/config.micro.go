// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: config.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigService service

func NewConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConfigService service

type ConfigService interface {
	// 获取邮件配置集合
	FindConfigs(ctx context.Context, in *FindConfigsRequest, opts ...client.CallOption) (*FindConfigsResponse, error)
	// 获取邮件配置
	FindConfig(ctx context.Context, in *FindConfigRequest, opts ...client.CallOption) (*FindConfigResponse, error)
	// 添加邮件配置
	AddConfig(ctx context.Context, in *AddConfigRequest, opts ...client.CallOption) (*AddConfigResponse, error)
	// 更新邮件配置
	ModifyConfig(ctx context.Context, in *ModifyConfigRequest, opts ...client.CallOption) (*ModifyConfigResponse, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) FindConfigs(ctx context.Context, in *FindConfigsRequest, opts ...client.CallOption) (*FindConfigsResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.FindConfigs", in)
	out := new(FindConfigsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) FindConfig(ctx context.Context, in *FindConfigRequest, opts ...client.CallOption) (*FindConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.FindConfig", in)
	out := new(FindConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) AddConfig(ctx context.Context, in *AddConfigRequest, opts ...client.CallOption) (*AddConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.AddConfig", in)
	out := new(AddConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) ModifyConfig(ctx context.Context, in *ModifyConfigRequest, opts ...client.CallOption) (*ModifyConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.ModifyConfig", in)
	out := new(ModifyConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceHandler interface {
	// 获取邮件配置集合
	FindConfigs(context.Context, *FindConfigsRequest, *FindConfigsResponse) error
	// 获取邮件配置
	FindConfig(context.Context, *FindConfigRequest, *FindConfigResponse) error
	// 添加邮件配置
	AddConfig(context.Context, *AddConfigRequest, *AddConfigResponse) error
	// 更新邮件配置
	ModifyConfig(context.Context, *ModifyConfigRequest, *ModifyConfigResponse) error
}

func RegisterConfigServiceHandler(s server.Server, hdlr ConfigServiceHandler, opts ...server.HandlerOption) error {
	type configService interface {
		FindConfigs(ctx context.Context, in *FindConfigsRequest, out *FindConfigsResponse) error
		FindConfig(ctx context.Context, in *FindConfigRequest, out *FindConfigResponse) error
		AddConfig(ctx context.Context, in *AddConfigRequest, out *AddConfigResponse) error
		ModifyConfig(ctx context.Context, in *ModifyConfigRequest, out *ModifyConfigResponse) error
	}
	type ConfigService struct {
		configService
	}
	h := &configServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigService{h}, opts...))
}

type configServiceHandler struct {
	ConfigServiceHandler
}

func (h *configServiceHandler) FindConfigs(ctx context.Context, in *FindConfigsRequest, out *FindConfigsResponse) error {
	return h.ConfigServiceHandler.FindConfigs(ctx, in, out)
}

func (h *configServiceHandler) FindConfig(ctx context.Context, in *FindConfigRequest, out *FindConfigResponse) error {
	return h.ConfigServiceHandler.FindConfig(ctx, in, out)
}

func (h *configServiceHandler) AddConfig(ctx context.Context, in *AddConfigRequest, out *AddConfigResponse) error {
	return h.ConfigServiceHandler.AddConfig(ctx, in, out)
}

func (h *configServiceHandler) ModifyConfig(ctx context.Context, in *ModifyConfigRequest, out *ModifyConfigResponse) error {
	return h.ConfigServiceHandler.ModifyConfig(ctx, in, out)
}
